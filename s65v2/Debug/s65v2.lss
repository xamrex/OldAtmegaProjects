
s65v2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001568  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         0000249c  00000000  00000000  000015bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000010bb  00000000  00000000  00003a58  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d3 01 	jmp	0x3a6	; 0x3a6 <__ctors_end>
       4:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
       8:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
       c:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
      10:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
      14:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
      18:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
      1c:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
      20:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
      24:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
      28:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
      2c:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
      30:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
      34:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
      38:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
      3c:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
      40:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
      44:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
      48:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
      4c:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
      50:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>

00000054 <__c.1437>:
      54:	72 61 76 6d 61 72 40 65 6c 65 6b 74 72 6f 64 61     ravmar@elektroda
	...

00000065 <__c.1435>:
      65:	43 6f 6d 70 69 6c 61 74 69 6f 6e 20 66 6f 72 3a     Compilation for:
	...

00000076 <__c.1433>:
      76:	44 72 69 76 65 72 20 76 65 72 73 69 6f 6e 3a 20     Driver version: 
      86:	31 2e 34 00                                         1.4.

0000008a <__c.1431>:
      8a:	53 36 35 2d 4c 50 48 38 38 33 36 00                 S65-LPH8836.

00000096 <__c.1429>:
      96:	53 36 35 2d 4c 32 46 35 30 20 2f 20 53 36 35 2d     S65-L2F50 / S65-
      a6:	4c 53 30 32 30 00                                   LS020.

000000ac <__c.1427>:
      ac:	62 79 20 53 61 70 65 72 5f 32 00                    by Saper_2.

000000b7 <__c.1425>:
      b7:	53 36 35 20 4c 43 44 20 64 72 69 76 65 72 73 00     S65 LCD drivers.

000000c7 <__c.1423>:
      c7:	5d 5c 3d 2d 2b 5f 21 40 23 24 25 5e 26 2a 28 29     ]\=-+_!@#$%^&*()
	...

000000d8 <__c.1421>:
      d8:	30 31 32 33 34 35 36 37 38 39 30 3c 3e 3f 2c 2e     01234567890<>?,.
      e8:	2f 3a 22 3b 27 7b 7d 7c 5b 00                       /:";'{}|[.

000000f2 <__c.1419>:
      f2:	61 62 63 64 65 66 67 68 69 6a 6b 6c 6d 6e 6f 70     abcdefghijklmnop
     102:	71 72 73 74 75 76 77 78 79 7a 00                    qrstuvwxyz.

0000010d <__c.1417>:
     10d:	41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f 50     ABCDEFGHIJKLMNOP
     11d:	51 52 53 54 55 56 57 58 59 5a 00                    QRSTUVWXYZ.

00000128 <__c.1415>:
     128:	0d 0a 49 6e 69 74 2e 2e 2e 20 45 4e 44 2e 0d 0a     ..Init... END...
     138:	54 45 53 54 49 4e 47 20 3a 44 3a 44 3a 44 3a 44     TESTING :D:D:D:D
     148:	0d 0a 00                                            ...

0000014b <__c.1413>:
     14b:	0d 0a 0d 0a 0d 0a 0d 0a 0d 0a 0d 0a 0d 0a 0d 0a     ................
     15b:	49 6e 69 74 2e 2e 2e 00                             Init....

00000163 <g_font5x8>:
     163:	00 00 00 00 00 00 00 7a 00 00 00 70 00 70 00 28     .......z...p.p.(
     173:	fe 28 fe 28 20 54 fe 54 08 00 68 10 2c 00 6c 92     .(.( T.T..h.,.l.
     183:	6c 02 00 00 00 70 00 00 00 3c 42 00 00 00 42 3c     l....p...<B...B<
     193:	00 00 2a 1c 1c 2a 00 08 08 3e 08 08 00 01 06 04     ..*..*...>......
     1a3:	00 08 08 08 08 00 00 02 07 02 00 06 08 10 60 00     ..............`.
     1b3:	00 3c 42 3c 00 00 22 7e 02 00 26 4a 4a 32 00 44     .<B<.."~..&JJ2.D
     1c3:	52 72 4c 00 18 28 7e 08 00 74 52 52 4c 00 3c 52     RrL..(~..tRRL.<R
     1d3:	52 0c 00 40 46 58 60 00 2c 52 52 2c 00 30 4a 4a     R..@FX`.,RR,.0JJ
     1e3:	3c 00 00 36 36 00 00 00 01 36 34 00 00 18 24 42     <..66....64...$B
     1f3:	00 14 14 14 14 00 00 42 24 18 00 00 20 4a 30 00     .......B$... J0.
     203:	3c 42 99 a5 78 3e 48 48 3e 00 7e 52 52 2c 00 3c     <B..x>HH>.~RR,.<
     213:	42 42 24 00 7e 42 42 3c 00 7e 52 52 42 00 7e 50     BB$.~BB<.~RRB.~P
     223:	50 40 00 3c 42 4a 2c 00 7e 10 10 7e 00 00 42 7e     P@.<BJ,.~..~..B~
     233:	42 00 04 42 7c 40 00 7e 10 2c 42 00 7e 02 02 02     B..B|@.~.,B.~...
     243:	00 7e 30 30 7e 00 7e 30 1c 7e 00 3c 42 42 3c 00     .~00~.~0.~.<BB<.
     253:	7e 48 48 30 00 3c 4a 46 3d 00 7e 48 48 36 00 24     ~HH0.<JF=.~HH6.$
     263:	52 4a 24 00 00 40 7e 40 00 7c 02 02 7c 00 78 06     RJ$..@~@.|..|.x.
     273:	06 78 00 7e 0c 0c 7e 00 66 18 18 66 00 60 10 0e     .x.~..~.f..f.`..
     283:	10 60 46 4a 52 62 00 00 7e 42 42 00 60 10 08 06     .`FJRb..~BB.`...
     293:	00 00 42 42 7e 00 00 20 40 20 00 01 01 01 01 00     ..BB~.. @ ......
     2a3:	00 40 20 00 00 0c 12 12 1e 00 7e 12 12 0c 00 00     .@ .......~.....
     2b3:	0c 12 12 00 0c 12 12 7e 00 0c 16 1a 08 00 08 3e     .......~.......>
     2c3:	48 20 00 08 15 15 0e 00 7e 10 10 0e 00 00 12 5e     H ......~......^
     2d3:	02 00 00 02 01 5e 00 7e 08 08 16 00 00 42 7e 02     .....^.~.....B~.
     2e3:	00 1e 10 0e 10 0e 1e 10 10 0e 00 0c 12 12 0c 00     ................
     2f3:	1f 14 14 08 00 08 14 14 1f 00 1e 08 10 08 00 00     ................
     303:	0a 1a 14 00 10 7c 12 04 00 1c 02 02 1e 00 00 1c     .....|..........
     313:	02 1c 00 1c 02 0c 02 1c 12 0c 0c 12 00 1a 05 05     ................
     323:	1e 00 12 16 1a 12 00 10 54 aa 82 00 00 00 7e 00     ........T.....~.
     333:	00 82 aa 54 10 00 20 40 20 40 00                    ...T.. @ @.

0000033e <gcp16.1606>:
     33e:	13 23 2d 33 38 3c 40 43 46 48 4a 4c 4e 50 64        .#-38<@CFHJLNPd

0000034d <gcp64_1.1605>:
     34d:	01 03 06 09 0b 0e 10 13 15 17 19 1c 1e 20 22 24     ............. "$
     35d:	26 28 2a 2c 2d 2f 31 33 35 37 39 3b 3d 3f 42 44     &(*,-/13579;=?BD
     36d:	47 5e                                               G^

0000036f <gcp64_0.1604>:
     36f:	11 27 3c 4c 5d 6c 78 84 90 99 a2 aa b2 ba c0 c7     .'<L]lx.........
     37f:	cc d2 d7 dc e0 e4 e8 ed f0 f4 f7 fb fe              .............

0000038c <disctl.1603>:
     38c:	4c 01 53 00 02 b4 b0 02 00                          L.S......

00000395 <usart_CharTab>:
     395:	30 31 32 33 34 35 36 37 38 39 41 42 43 44 45 46     0123456789ABCDEF
	...

000003a6 <__ctors_end>:
     3a6:	11 24       	eor	r1, r1
     3a8:	1f be       	out	0x3f, r1	; 63
     3aa:	cf e5       	ldi	r28, 0x5F	; 95
     3ac:	d8 e0       	ldi	r29, 0x08	; 8
     3ae:	de bf       	out	0x3e, r29	; 62
     3b0:	cd bf       	out	0x3d, r28	; 61
     3b2:	0e 94 1d 02 	call	0x43a	; 0x43a <main>
     3b6:	0c 94 b2 0a 	jmp	0x1564	; 0x1564 <_exit>

000003ba <__bad_interrupt>:
     3ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003be <delay1us>:
// set to 1 if F_CPU is 25MHz else must be 0
#define FCPU25MHZ_ON 0
// set to 1 if F_CPU is 20MHz else must be 0
#define FCPU20MHZ_ON 0

void delay1us(uint16_t t) {
     3be:	df 93       	push	r29
     3c0:	cf 93       	push	r28
     3c2:	00 d0       	rcall	.+0      	; 0x3c4 <delay1us+0x6>
     3c4:	cd b7       	in	r28, 0x3d	; 61
     3c6:	de b7       	in	r29, 0x3e	; 62
     3c8:	9a 83       	std	Y+2, r25	; 0x02
     3ca:	89 83       	std	Y+1, r24	; 0x01
     3cc:	13 c0       	rjmp	.+38     	; 0x3f4 <delay1us+0x36>
	...
			asm volatile("nop"::);
			asm volatile("nop"::);
			asm volatile("nop"::);

		#endif
		--t;
     3ea:	89 81       	ldd	r24, Y+1	; 0x01
     3ec:	9a 81       	ldd	r25, Y+2	; 0x02
     3ee:	01 97       	sbiw	r24, 0x01	; 1
     3f0:	9a 83       	std	Y+2, r25	; 0x02
     3f2:	89 83       	std	Y+1, r24	; 0x01
#define FCPU25MHZ_ON 0
// set to 1 if F_CPU is 20MHz else must be 0
#define FCPU20MHZ_ON 0

void delay1us(uint16_t t) {
	while (t>0) {
     3f4:	89 81       	ldd	r24, Y+1	; 0x01
     3f6:	9a 81       	ldd	r25, Y+2	; 0x02
     3f8:	00 97       	sbiw	r24, 0x00	; 0
     3fa:	49 f7       	brne	.-46     	; 0x3ce <delay1us+0x10>
			asm volatile("nop"::);

		#endif
		--t;
	}
}
     3fc:	0f 90       	pop	r0
     3fe:	0f 90       	pop	r0
     400:	cf 91       	pop	r28
     402:	df 91       	pop	r29
     404:	08 95       	ret

00000406 <delay1ms>:

void delay1ms(uint16_t t) {
     406:	df 93       	push	r29
     408:	cf 93       	push	r28
     40a:	00 d0       	rcall	.+0      	; 0x40c <delay1ms+0x6>
     40c:	cd b7       	in	r28, 0x3d	; 61
     40e:	de b7       	in	r29, 0x3e	; 62
     410:	9a 83       	std	Y+2, r25	; 0x02
     412:	89 83       	std	Y+1, r24	; 0x01
     414:	09 c0       	rjmp	.+18     	; 0x428 <delay1ms+0x22>
	while (t>0) {
		delay1us(995);
     416:	83 ee       	ldi	r24, 0xE3	; 227
     418:	93 e0       	ldi	r25, 0x03	; 3
     41a:	0e 94 df 01 	call	0x3be	; 0x3be <delay1us>
		--t;
     41e:	89 81       	ldd	r24, Y+1	; 0x01
     420:	9a 81       	ldd	r25, Y+2	; 0x02
     422:	01 97       	sbiw	r24, 0x01	; 1
     424:	9a 83       	std	Y+2, r25	; 0x02
     426:	89 83       	std	Y+1, r24	; 0x01
		--t;
	}
}

void delay1ms(uint16_t t) {
	while (t>0) {
     428:	89 81       	ldd	r24, Y+1	; 0x01
     42a:	9a 81       	ldd	r25, Y+2	; 0x02
     42c:	00 97       	sbiw	r24, 0x00	; 0
     42e:	99 f7       	brne	.-26     	; 0x416 <delay1ms+0x10>
		delay1us(995);
		--t;
	}
}
     430:	0f 90       	pop	r0
     432:	0f 90       	pop	r0
     434:	cf 91       	pop	r28
     436:	df 91       	pop	r29
     438:	08 95       	ret

0000043a <main>:
#if SAPER_LOGO == 1
	#include "saper_logo.h"
	#include "saper_logo_color.h"
#endif

int main(void) {
     43a:	0f 93       	push	r16
     43c:	1f 93       	push	r17
     43e:	df 93       	push	r29
     440:	cf 93       	push	r28
     442:	cd b7       	in	r28, 0x3d	; 61
     444:	de b7       	in	r29, 0x3e	; 62
	//uint8_t x,y,i=0;
	//delay1ms(100);
	usart_Init();
     446:	0e 94 79 09 	call	0x12f2	; 0x12f2 <usart_Init>
	usart_SendStrP((prog_char*)PSTR("\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nInit..."));
     44a:	8b e4       	ldi	r24, 0x4B	; 75
     44c:	91 e0       	ldi	r25, 0x01	; 1
     44e:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <usart_SendStrP>
	
	s65_init();
     452:	0e 94 9e 03 	call	0x73c	; 0x73c <s65_init>
	
	usart_SendStrP((prog_char*)PSTR("\r\nInit... END.\r\nTESTING :D:D:D:D\r\n"));
     456:	88 e2       	ldi	r24, 0x28	; 40
     458:	91 e0       	ldi	r25, 0x01	; 1
     45a:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <usart_SendStrP>
	
	//s65_fill(S65_COLOR_BLACK);
	//s65_fill(S65_COLOR_RED);
	//s65_fill(S65_COLOR_GREEN);
	s65_fill(S65_COLOR_BLUE);
     45e:	8f e1       	ldi	r24, 0x1F	; 31
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	0e 94 81 04 	call	0x902	; 0x902 <s65_fill>
	delay1ms(50);
     466:	82 e3       	ldi	r24, 0x32	; 50
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	0e 94 03 02 	call	0x406	; 0x406 <delay1ms>
	s65_fill(S65_COLOR_WHITE);
     46e:	8f ef       	ldi	r24, 0xFF	; 255
     470:	9f ef       	ldi	r25, 0xFF	; 255
     472:	0e 94 81 04 	call	0x902	; 0x902 <s65_fill>
	
	#if S65_ROTATE_90==0
	
	s65_strP(1,8,(prog_char*)PSTR("ABCDEFGHIJKLMNOPQRSTUVWXYZ"),S65_COLOR_WHITE,S65_COLOR_BLUE);
     476:	2d e0       	ldi	r18, 0x0D	; 13
     478:	31 e0       	ldi	r19, 0x01	; 1
     47a:	81 e0       	ldi	r24, 0x01	; 1
     47c:	68 e0       	ldi	r22, 0x08	; 8
     47e:	a9 01       	movw	r20, r18
     480:	2f ef       	ldi	r18, 0xFF	; 255
     482:	3f ef       	ldi	r19, 0xFF	; 255
     484:	0f e1       	ldi	r16, 0x1F	; 31
     486:	10 e0       	ldi	r17, 0x00	; 0
     488:	0e 94 55 08 	call	0x10aa	; 0x10aa <s65_strP>
	s65_strP(1,20,(prog_char*)PSTR("abcdefghijklmnopqrstuvwxyz"),S65_COLOR_LIME,S65_COLOR_BLACK);
     48c:	22 ef       	ldi	r18, 0xF2	; 242
     48e:	30 e0       	ldi	r19, 0x00	; 0
     490:	81 e0       	ldi	r24, 0x01	; 1
     492:	64 e1       	ldi	r22, 0x14	; 20
     494:	a9 01       	movw	r20, r18
     496:	20 ee       	ldi	r18, 0xE0	; 224
     498:	37 e0       	ldi	r19, 0x07	; 7
     49a:	00 e0       	ldi	r16, 0x00	; 0
     49c:	10 e0       	ldi	r17, 0x00	; 0
     49e:	0e 94 55 08 	call	0x10aa	; 0x10aa <s65_strP>
	s65_strP(1,32,(prog_char*)PSTR("01234567890<>?,./:\";'{}|["),COLOR_WHEAT,S65_COLOR_RED);
     4a2:	28 ed       	ldi	r18, 0xD8	; 216
     4a4:	30 e0       	ldi	r19, 0x00	; 0
     4a6:	81 e0       	ldi	r24, 0x01	; 1
     4a8:	60 e2       	ldi	r22, 0x20	; 32
     4aa:	a9 01       	movw	r20, r18
     4ac:	26 ef       	ldi	r18, 0xF6	; 246
     4ae:	36 ef       	ldi	r19, 0xF6	; 246
     4b0:	00 e0       	ldi	r16, 0x00	; 0
     4b2:	18 ef       	ldi	r17, 0xF8	; 248
     4b4:	0e 94 55 08 	call	0x10aa	; 0x10aa <s65_strP>
	s65_strP(1,44,(prog_char*)PSTR("]\\=-+_!@#$%^&*()"),S65_COLOR_BLACK,COLOR_PERU);
     4b8:	27 ec       	ldi	r18, 0xC7	; 199
     4ba:	30 e0       	ldi	r19, 0x00	; 0
     4bc:	81 e0       	ldi	r24, 0x01	; 1
     4be:	6c e2       	ldi	r22, 0x2C	; 44
     4c0:	a9 01       	movw	r20, r18
     4c2:	20 e0       	ldi	r18, 0x00	; 0
     4c4:	30 e0       	ldi	r19, 0x00	; 0
     4c6:	07 e2       	ldi	r16, 0x27	; 39
     4c8:	1c ec       	ldi	r17, 0xCC	; 204
     4ca:	0e 94 55 08 	call	0x10aa	; 0x10aa <s65_strP>
	// functions test:
	s65_lineH(1,1,128,S65_COLOR_BLUE);
     4ce:	81 e0       	ldi	r24, 0x01	; 1
     4d0:	61 e0       	ldi	r22, 0x01	; 1
     4d2:	40 e8       	ldi	r20, 0x80	; 128
     4d4:	2f e1       	ldi	r18, 0x1F	; 31
     4d6:	30 e0       	ldi	r19, 0x00	; 0
     4d8:	0e 94 4d 05 	call	0xa9a	; 0xa9a <s65_lineH>
	s65_lineV(1,64,109,S65_COLOR_FUCHSIA);
     4dc:	81 e0       	ldi	r24, 0x01	; 1
     4de:	60 e4       	ldi	r22, 0x40	; 64
     4e0:	4d e6       	ldi	r20, 0x6D	; 109
     4e2:	2f e1       	ldi	r18, 0x1F	; 31
     4e4:	38 ef       	ldi	r19, 0xF8	; 248
     4e6:	0e 94 83 05 	call	0xb06	; 0xb06 <s65_lineV>
	
	s65_line(10,65,128,125,S65_COLOR_OLIVE);
     4ea:	8a e0       	ldi	r24, 0x0A	; 10
     4ec:	61 e4       	ldi	r22, 0x41	; 65
     4ee:	40 e8       	ldi	r20, 0x80	; 128
     4f0:	2d e7       	ldi	r18, 0x7D	; 125
     4f2:	00 e0       	ldi	r16, 0x00	; 0
     4f4:	14 e8       	ldi	r17, 0x84	; 132
     4f6:	0e 94 c2 05 	call	0xb84	; 0xb84 <s65_line>
	s65_line(10,125,128,65,S65_COLOR_OLIVE);
     4fa:	8a e0       	ldi	r24, 0x0A	; 10
     4fc:	6d e7       	ldi	r22, 0x7D	; 125
     4fe:	40 e8       	ldi	r20, 0x80	; 128
     500:	21 e4       	ldi	r18, 0x41	; 65
     502:	00 e0       	ldi	r16, 0x00	; 0
     504:	14 e8       	ldi	r17, 0x84	; 132
     506:	0e 94 c2 05 	call	0xb84	; 0xb84 <s65_line>
		s65_rect(rec_x-2,rec_y-2,rec_x+50+2,rec_y+50+2,COLOR_ORANGE);
		
	#endif
	
	
	s65_rectFill(10,130,125,150,S65_COLOR_BLUE);
     50a:	8a e0       	ldi	r24, 0x0A	; 10
     50c:	62 e8       	ldi	r22, 0x82	; 130
     50e:	4d e7       	ldi	r20, 0x7D	; 125
     510:	26 e9       	ldi	r18, 0x96	; 150
     512:	0f e1       	ldi	r16, 0x1F	; 31
     514:	10 e0       	ldi	r17, 0x00	; 0
     516:	0e 94 7c 07 	call	0xef8	; 0xef8 <s65_rectFill>
	s65_strP(32,132,(prog_char*)PSTR("S65 LCD drivers"), S65_COLOR_BLUE, S65_COLOR_AQUA);
     51a:	27 eb       	ldi	r18, 0xB7	; 183
     51c:	30 e0       	ldi	r19, 0x00	; 0
     51e:	80 e2       	ldi	r24, 0x20	; 32
     520:	64 e8       	ldi	r22, 0x84	; 132
     522:	a9 01       	movw	r20, r18
     524:	2f e1       	ldi	r18, 0x1F	; 31
     526:	30 e0       	ldi	r19, 0x00	; 0
     528:	0f ef       	ldi	r16, 0xFF	; 255
     52a:	17 e0       	ldi	r17, 0x07	; 7
     52c:	0e 94 55 08 	call	0x10aa	; 0x10aa <s65_strP>
	s65_strP(42,141,(prog_char*)PSTR("by Saper_2"), S65_COLOR_BLUE, S65_COLOR_YELLOW);
     530:	2c ea       	ldi	r18, 0xAC	; 172
     532:	30 e0       	ldi	r19, 0x00	; 0
     534:	8a e2       	ldi	r24, 0x2A	; 42
     536:	6d e8       	ldi	r22, 0x8D	; 141
     538:	a9 01       	movw	r20, r18
     53a:	2f e1       	ldi	r18, 0x1F	; 31
     53c:	30 e0       	ldi	r19, 0x00	; 0
     53e:	00 ee       	ldi	r16, 0xE0	; 224
     540:	1f ef       	ldi	r17, 0xFF	; 255
     542:	0e 94 55 08 	call	0x10aa	; 0x10aa <s65_strP>
	
	s65_strP(15,152,(prog_char*)PSTR("S65-L2F50 / S65-LS020"),COLOR_WHITE, COLOR_BLACK);
     546:	26 e9       	ldi	r18, 0x96	; 150
     548:	30 e0       	ldi	r19, 0x00	; 0
     54a:	8f e0       	ldi	r24, 0x0F	; 15
     54c:	68 e9       	ldi	r22, 0x98	; 152
     54e:	a9 01       	movw	r20, r18
     550:	2f ef       	ldi	r18, 0xFF	; 255
     552:	3f ef       	ldi	r19, 0xFF	; 255
     554:	00 e0       	ldi	r16, 0x00	; 0
     556:	10 e0       	ldi	r17, 0x00	; 0
     558:	0e 94 55 08 	call	0x10aa	; 0x10aa <s65_strP>
	s65_strP(31,160,(prog_char*)PSTR("S65-LPH8836"),COLOR_WHITE, COLOR_BLACK);
     55c:	2a e8       	ldi	r18, 0x8A	; 138
     55e:	30 e0       	ldi	r19, 0x00	; 0
     560:	8f e1       	ldi	r24, 0x1F	; 31
     562:	60 ea       	ldi	r22, 0xA0	; 160
     564:	a9 01       	movw	r20, r18
     566:	2f ef       	ldi	r18, 0xFF	; 255
     568:	3f ef       	ldi	r19, 0xFF	; 255
     56a:	00 e0       	ldi	r16, 0x00	; 0
     56c:	10 e0       	ldi	r17, 0x00	; 0
     56e:	0e 94 55 08 	call	0x10aa	; 0x10aa <s65_strP>
	s65_strP(18,168,(prog_char*)PSTR("Driver version: 1.4"),COLOR_WHITE, COLOR_BLACK);
     572:	26 e7       	ldi	r18, 0x76	; 118
     574:	30 e0       	ldi	r19, 0x00	; 0
     576:	82 e1       	ldi	r24, 0x12	; 18
     578:	68 ea       	ldi	r22, 0xA8	; 168
     57a:	a9 01       	movw	r20, r18
     57c:	2f ef       	ldi	r18, 0xFF	; 255
     57e:	3f ef       	ldi	r19, 0xFF	; 255
     580:	00 e0       	ldi	r16, 0x00	; 0
     582:	10 e0       	ldi	r17, 0x00	; 0
     584:	0e 94 55 08 	call	0x10aa	; 0x10aa <s65_strP>
	s65_strP(15,112,(prog_char*)PSTR("S65-L2F50/S65-LS020/S65-LPH8836"),COLOR_WHITE, COLOR_BLACK);
	s65_strP(40,122,(prog_char*)PSTR("Driver version: 1.4"),COLOR_WHITE, COLOR_BLACK);	
	
	#endif
	
	s65_strP(40,75,(prog_char*)PSTR("Compilation for:"), COLOR_GOLD, COLOR_BLACK);
     588:	25 e6       	ldi	r18, 0x65	; 101
     58a:	30 e0       	ldi	r19, 0x00	; 0
     58c:	88 e2       	ldi	r24, 0x28	; 40
     58e:	6b e4       	ldi	r22, 0x4B	; 75
     590:	a9 01       	movw	r20, r18
     592:	20 ea       	ldi	r18, 0xA0	; 160
     594:	3e ef       	ldi	r19, 0xFE	; 254
     596:	00 e0       	ldi	r16, 0x00	; 0
     598:	10 e0       	ldi	r17, 0x00	; 0
     59a:	0e 94 55 08 	call	0x10aa	; 0x10aa <s65_strP>
	s65_strP(40,83,(prog_char*)PSTR("ravmar@elektroda"), COLOR_GOLD, COLOR_BLACK);
     59e:	24 e5       	ldi	r18, 0x54	; 84
     5a0:	30 e0       	ldi	r19, 0x00	; 0
     5a2:	88 e2       	ldi	r24, 0x28	; 40
     5a4:	63 e5       	ldi	r22, 0x53	; 83
     5a6:	a9 01       	movw	r20, r18
     5a8:	20 ea       	ldi	r18, 0xA0	; 160
     5aa:	3e ef       	ldi	r19, 0xFE	; 254
     5ac:	00 e0       	ldi	r16, 0x00	; 0
     5ae:	10 e0       	ldi	r17, 0x00	; 0
     5b0:	0e 94 55 08 	call	0x10aa	; 0x10aa <s65_strP>
     5b4:	ff cf       	rjmp	.-2      	; 0x5b4 <main+0x17a>

000005b6 <s65_spi_byte>:
LCD S65 support SPI Mode0, SPI bus state when idle (/CS=H): CLK=Low. 
When bus active: On rising edge CLK - data line is sampled, on faling edge CLK - data line is setup.
Data order: from MSB to LSB .
*/

void s65_spi_byte(uint8_t b) {
     5b6:	df 93       	push	r29
     5b8:	cf 93       	push	r28
     5ba:	00 d0       	rcall	.+0      	; 0x5bc <s65_spi_byte+0x6>
     5bc:	cd b7       	in	r28, 0x3d	; 61
     5be:	de b7       	in	r29, 0x3e	; 62
     5c0:	8a 83       	std	Y+2, r24	; 0x02
	#if defined(S65_DEBUG)
	usart_SendStrP((prog_char*)PSTR("\r\nSending byte: 0x"));
	usart_SendHexByte(b);
	#endif
	for (uint8_t i=0;i<8;i++) {
     5c2:	19 82       	std	Y+1, r1	; 0x01
     5c4:	2a c0       	rjmp	.+84     	; 0x61a <s65_spi_byte+0x64>
		if (b & 0x80) S65_PORT |= (1<<S65_DTA);
     5c6:	8a 81       	ldd	r24, Y+2	; 0x02
     5c8:	88 23       	and	r24, r24
     5ca:	44 f4       	brge	.+16     	; 0x5dc <s65_spi_byte+0x26>
     5cc:	ab e3       	ldi	r26, 0x3B	; 59
     5ce:	b0 e0       	ldi	r27, 0x00	; 0
     5d0:	eb e3       	ldi	r30, 0x3B	; 59
     5d2:	f0 e0       	ldi	r31, 0x00	; 0
     5d4:	80 81       	ld	r24, Z
     5d6:	80 61       	ori	r24, 0x10	; 16
     5d8:	8c 93       	st	X, r24
     5da:	07 c0       	rjmp	.+14     	; 0x5ea <s65_spi_byte+0x34>
			else S65_PORT &= ~(1<<S65_DTA);
     5dc:	ab e3       	ldi	r26, 0x3B	; 59
     5de:	b0 e0       	ldi	r27, 0x00	; 0
     5e0:	eb e3       	ldi	r30, 0x3B	; 59
     5e2:	f0 e0       	ldi	r31, 0x00	; 0
     5e4:	80 81       	ld	r24, Z
     5e6:	8f 7e       	andi	r24, 0xEF	; 239
     5e8:	8c 93       	st	X, r24
		b <<= 1;
     5ea:	8a 81       	ldd	r24, Y+2	; 0x02
     5ec:	88 0f       	add	r24, r24
     5ee:	8a 83       	std	Y+2, r24	; 0x02
		//nop;
		S65_PORT |= (1<<S65_CLK); // rising
     5f0:	ab e3       	ldi	r26, 0x3B	; 59
     5f2:	b0 e0       	ldi	r27, 0x00	; 0
     5f4:	eb e3       	ldi	r30, 0x3B	; 59
     5f6:	f0 e0       	ldi	r31, 0x00	; 0
     5f8:	80 81       	ld	r24, Z
     5fa:	88 60       	ori	r24, 0x08	; 8
     5fc:	8c 93       	st	X, r24
		//delay1us(S65_SPI_DELAY_US); 
		nop;
     5fe:	00 00       	nop
		nop;
     600:	00 00       	nop
		S65_PORT &= ~(1<<S65_CLK); // falinig
     602:	ab e3       	ldi	r26, 0x3B	; 59
     604:	b0 e0       	ldi	r27, 0x00	; 0
     606:	eb e3       	ldi	r30, 0x3B	; 59
     608:	f0 e0       	ldi	r31, 0x00	; 0
     60a:	80 81       	ld	r24, Z
     60c:	87 7f       	andi	r24, 0xF7	; 247
     60e:	8c 93       	st	X, r24
		//delay1us(S65_SPI_DELAY_US); 
		nop;
     610:	00 00       	nop
		nop;
     612:	00 00       	nop
void s65_spi_byte(uint8_t b) {
	#if defined(S65_DEBUG)
	usart_SendStrP((prog_char*)PSTR("\r\nSending byte: 0x"));
	usart_SendHexByte(b);
	#endif
	for (uint8_t i=0;i<8;i++) {
     614:	89 81       	ldd	r24, Y+1	; 0x01
     616:	8f 5f       	subi	r24, 0xFF	; 255
     618:	89 83       	std	Y+1, r24	; 0x01
     61a:	89 81       	ldd	r24, Y+1	; 0x01
     61c:	88 30       	cpi	r24, 0x08	; 8
     61e:	98 f2       	brcs	.-90     	; 0x5c6 <s65_spi_byte+0x10>
		//delay1us(S65_SPI_DELAY_US); 
		nop;
		nop;
	}
	//S65_PORT &= ~(1<<S65_CLK); // pull down
}
     620:	0f 90       	pop	r0
     622:	0f 90       	pop	r0
     624:	cf 91       	pop	r28
     626:	df 91       	pop	r29
     628:	08 95       	ret

0000062a <s65_spi_word>:

void s65_spi_word(uint16_t b) {
     62a:	df 93       	push	r29
     62c:	cf 93       	push	r28
     62e:	00 d0       	rcall	.+0      	; 0x630 <s65_spi_word+0x6>
     630:	cd b7       	in	r28, 0x3d	; 61
     632:	de b7       	in	r29, 0x3e	; 62
     634:	9a 83       	std	Y+2, r25	; 0x02
     636:	89 83       	std	Y+1, r24	; 0x01
	#if defined(S65_DEBUG)
	usart_SendStrP((prog_char*)PSTR("\r\nSending word: 0x"));
	usart_SendHexByte(b>>8);
	usart_SendHexByte(b);
	#endif
	s65_spi_byte(b>>8);
     638:	89 81       	ldd	r24, Y+1	; 0x01
     63a:	9a 81       	ldd	r25, Y+2	; 0x02
     63c:	89 2f       	mov	r24, r25
     63e:	99 27       	eor	r25, r25
     640:	0e 94 db 02 	call	0x5b6	; 0x5b6 <s65_spi_byte>
	s65_spi_byte(b);
     644:	89 81       	ldd	r24, Y+1	; 0x01
     646:	0e 94 db 02 	call	0x5b6	; 0x5b6 <s65_spi_byte>
}
     64a:	0f 90       	pop	r0
     64c:	0f 90       	pop	r0
     64e:	cf 91       	pop	r28
     650:	df 91       	pop	r29
     652:	08 95       	ret

00000654 <s65_cmd>:
// ++                                                                                                ++
// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#elif defined(S65_TYPE_L2F50)

void s65_cmd(uint8_t cmd) {
     654:	df 93       	push	r29
     656:	cf 93       	push	r28
     658:	0f 92       	push	r0
     65a:	cd b7       	in	r28, 0x3d	; 61
     65c:	de b7       	in	r29, 0x3e	; 62
     65e:	89 83       	std	Y+1, r24	; 0x01
	#if defined(S65_DEBUG)
	usart_SendStrP((prog_char*)PSTR("\r\n **** Sending COMMAND 0x"));
	usart_SendHexByte(cmd);
	usart_SendStrP((prog_char*)PSTR(" ****"));
	#endif
	S65_PORT &= ~(1<<S65_RS); // Command
     660:	ab e3       	ldi	r26, 0x3B	; 59
     662:	b0 e0       	ldi	r27, 0x00	; 0
     664:	eb e3       	ldi	r30, 0x3B	; 59
     666:	f0 e0       	ldi	r31, 0x00	; 0
     668:	80 81       	ld	r24, Z
     66a:	8e 7f       	andi	r24, 0xFE	; 254
     66c:	8c 93       	st	X, r24
	s65_select;
     66e:	ab e3       	ldi	r26, 0x3B	; 59
     670:	b0 e0       	ldi	r27, 0x00	; 0
     672:	eb e3       	ldi	r30, 0x3B	; 59
     674:	f0 e0       	ldi	r31, 0x00	; 0
     676:	80 81       	ld	r24, Z
     678:	8b 7f       	andi	r24, 0xFB	; 251
     67a:	8c 93       	st	X, r24
	//nop;
	s65_spi_byte(cmd);
     67c:	89 81       	ldd	r24, Y+1	; 0x01
     67e:	0e 94 db 02 	call	0x5b6	; 0x5b6 <s65_spi_byte>
	s65_spi_byte(0x00);
     682:	80 e0       	ldi	r24, 0x00	; 0
     684:	0e 94 db 02 	call	0x5b6	; 0x5b6 <s65_spi_byte>
	//nop;
	s65_deselect;
     688:	ab e3       	ldi	r26, 0x3B	; 59
     68a:	b0 e0       	ldi	r27, 0x00	; 0
     68c:	eb e3       	ldi	r30, 0x3B	; 59
     68e:	f0 e0       	ldi	r31, 0x00	; 0
     690:	80 81       	ld	r24, Z
     692:	84 60       	ori	r24, 0x04	; 4
     694:	8c 93       	st	X, r24
	delay1us(S65_DATA_CMD_DELAY);
	#endif
	#if defined(S65_DEBUG)
	usart_SendStrP((prog_char*)PSTR("\r\n **** END COMMAND SEND ****"));
	#endif
}
     696:	0f 90       	pop	r0
     698:	cf 91       	pop	r28
     69a:	df 91       	pop	r29
     69c:	08 95       	ret

0000069e <s65_data16>:
	
void s65_data16(uint16_t data) {
     69e:	df 93       	push	r29
     6a0:	cf 93       	push	r28
     6a2:	00 d0       	rcall	.+0      	; 0x6a4 <s65_data16+0x6>
     6a4:	cd b7       	in	r28, 0x3d	; 61
     6a6:	de b7       	in	r29, 0x3e	; 62
     6a8:	9a 83       	std	Y+2, r25	; 0x02
     6aa:	89 83       	std	Y+1, r24	; 0x01
	usart_SendStrP((prog_char*)PSTR("\r\n **** Sending DATA 0x"));
	usart_SendHexByte(data>>8);
	usart_SendHexByte(data);
	usart_SendStrP((prog_char*)PSTR(" ****"));
	#endif
	S65_PORT |= (1<<S65_RS); // data
     6ac:	ab e3       	ldi	r26, 0x3B	; 59
     6ae:	b0 e0       	ldi	r27, 0x00	; 0
     6b0:	eb e3       	ldi	r30, 0x3B	; 59
     6b2:	f0 e0       	ldi	r31, 0x00	; 0
     6b4:	80 81       	ld	r24, Z
     6b6:	81 60       	ori	r24, 0x01	; 1
     6b8:	8c 93       	st	X, r24
	s65_select;
     6ba:	ab e3       	ldi	r26, 0x3B	; 59
     6bc:	b0 e0       	ldi	r27, 0x00	; 0
     6be:	eb e3       	ldi	r30, 0x3B	; 59
     6c0:	f0 e0       	ldi	r31, 0x00	; 0
     6c2:	80 81       	ld	r24, Z
     6c4:	8b 7f       	andi	r24, 0xFB	; 251
     6c6:	8c 93       	st	X, r24
	//nop;
	s65_spi_byte(data>>8);
     6c8:	89 81       	ldd	r24, Y+1	; 0x01
     6ca:	9a 81       	ldd	r25, Y+2	; 0x02
     6cc:	89 2f       	mov	r24, r25
     6ce:	99 27       	eor	r25, r25
     6d0:	0e 94 db 02 	call	0x5b6	; 0x5b6 <s65_spi_byte>
	s65_spi_byte(data);
     6d4:	89 81       	ldd	r24, Y+1	; 0x01
     6d6:	0e 94 db 02 	call	0x5b6	; 0x5b6 <s65_spi_byte>
	//nop;
	s65_deselect;
     6da:	ab e3       	ldi	r26, 0x3B	; 59
     6dc:	b0 e0       	ldi	r27, 0x00	; 0
     6de:	eb e3       	ldi	r30, 0x3B	; 59
     6e0:	f0 e0       	ldi	r31, 0x00	; 0
     6e2:	80 81       	ld	r24, Z
     6e4:	84 60       	ori	r24, 0x04	; 4
     6e6:	8c 93       	st	X, r24
	delay1us(S65_DATA_CMD_DELAY);
	#endif
	#if defined(S65_DEBUG)
	usart_SendStrP((prog_char*)PSTR("\r\n **** END DATA SEND ****"));
	#endif
}
     6e8:	0f 90       	pop	r0
     6ea:	0f 90       	pop	r0
     6ec:	cf 91       	pop	r28
     6ee:	df 91       	pop	r29
     6f0:	08 95       	ret

000006f2 <s65_data00>:

void s65_data00(uint8_t data) {
     6f2:	df 93       	push	r29
     6f4:	cf 93       	push	r28
     6f6:	0f 92       	push	r0
     6f8:	cd b7       	in	r28, 0x3d	; 61
     6fa:	de b7       	in	r29, 0x3e	; 62
     6fc:	89 83       	std	Y+1, r24	; 0x01
	#if defined(S65_DEBUG)
	usart_SendStrP((prog_char*)PSTR("\r\n **** Sending DATA_00 0x"));
	usart_SendHexByte(data);
	usart_SendStrP((prog_char*)PSTR(" ****"));
	#endif
	S65_PORT |= (1<<S65_RS); // data
     6fe:	ab e3       	ldi	r26, 0x3B	; 59
     700:	b0 e0       	ldi	r27, 0x00	; 0
     702:	eb e3       	ldi	r30, 0x3B	; 59
     704:	f0 e0       	ldi	r31, 0x00	; 0
     706:	80 81       	ld	r24, Z
     708:	81 60       	ori	r24, 0x01	; 1
     70a:	8c 93       	st	X, r24
	s65_select;
     70c:	ab e3       	ldi	r26, 0x3B	; 59
     70e:	b0 e0       	ldi	r27, 0x00	; 0
     710:	eb e3       	ldi	r30, 0x3B	; 59
     712:	f0 e0       	ldi	r31, 0x00	; 0
     714:	80 81       	ld	r24, Z
     716:	8b 7f       	andi	r24, 0xFB	; 251
     718:	8c 93       	st	X, r24
	//nop;
	s65_spi_byte(data);
     71a:	89 81       	ldd	r24, Y+1	; 0x01
     71c:	0e 94 db 02 	call	0x5b6	; 0x5b6 <s65_spi_byte>
	s65_spi_byte(0x00);
     720:	80 e0       	ldi	r24, 0x00	; 0
     722:	0e 94 db 02 	call	0x5b6	; 0x5b6 <s65_spi_byte>
	//nop;
	s65_deselect;
     726:	ab e3       	ldi	r26, 0x3B	; 59
     728:	b0 e0       	ldi	r27, 0x00	; 0
     72a:	eb e3       	ldi	r30, 0x3B	; 59
     72c:	f0 e0       	ldi	r31, 0x00	; 0
     72e:	80 81       	ld	r24, Z
     730:	84 60       	ori	r24, 0x04	; 4
     732:	8c 93       	st	X, r24
	delay1us(S65_DATA_CMD_DELAY);
	#endif
	#if defined(S65_DEBUG)
	usart_SendStrP((prog_char*)PSTR("\r\n **** END DATA SEND ****"));
	#endif
}
     734:	0f 90       	pop	r0
     736:	cf 91       	pop	r28
     738:	df 91       	pop	r29
     73a:	08 95       	ret

0000073c <s65_init>:

void s65_init(void) {
     73c:	df 93       	push	r29
     73e:	cf 93       	push	r28
     740:	cd b7       	in	r28, 0x3d	; 61
     742:	de b7       	in	r29, 0x3e	; 62
     744:	2d 97       	sbiw	r28, 0x0d	; 13
     746:	0f b6       	in	r0, 0x3f	; 63
     748:	f8 94       	cli
     74a:	de bf       	out	0x3e, r29	; 62
     74c:	0f be       	out	0x3f, r0	; 63
     74e:	cd bf       	out	0x3d, r28	; 61
												0x13, 0x23, 0x2D, 0x33, 0x38, 0x3C, 0x40, 0x43,
												0x46, 0x48, 0x4A, 0x4C, 0x4E, 0x50, 0x64
											};

	#if S65_SPI_SOFTWARE==1
		S65_PORT |= 1<<S65_CS | 1<<S65_RS | 1<<S65_CLK | 1<<S65_DTA;
     750:	ab e3       	ldi	r26, 0x3B	; 59
     752:	b0 e0       	ldi	r27, 0x00	; 0
     754:	eb e3       	ldi	r30, 0x3B	; 59
     756:	f0 e0       	ldi	r31, 0x00	; 0
     758:	80 81       	ld	r24, Z
     75a:	8d 61       	ori	r24, 0x1D	; 29
     75c:	8c 93       	st	X, r24
		S65_PORT &= ~(1<<S65_CLK | 1<<S65_RST);
     75e:	ab e3       	ldi	r26, 0x3B	; 59
     760:	b0 e0       	ldi	r27, 0x00	; 0
     762:	eb e3       	ldi	r30, 0x3B	; 59
     764:	f0 e0       	ldi	r31, 0x00	; 0
     766:	80 81       	ld	r24, Z
     768:	85 7f       	andi	r24, 0xF5	; 245
     76a:	8c 93       	st	X, r24
		S65_DDR |= 1<<S65_CS | 1<<S65_RS | 1<<S65_CLK | 1<<S65_DTA | 1<<S65_RST;
     76c:	aa e3       	ldi	r26, 0x3A	; 58
     76e:	b0 e0       	ldi	r27, 0x00	; 0
     770:	ea e3       	ldi	r30, 0x3A	; 58
     772:	f0 e0       	ldi	r31, 0x00	; 0
     774:	80 81       	ld	r24, Z
     776:	8f 61       	ori	r24, 0x1F	; 31
     778:	8c 93       	st	X, r24
		S65_PORT &= ~(1<<S65_CLK | 1<<S65_RST);
		S65_DDR |= 1<<S65_CS | 1<<S65_RS | 1<<S65_CLK | 1<<S65_DTA | 1<<S65_RST;
		
	#endif
	// RESET is pulled down above ^^^^
	delay1ms(15);
     77a:	8f e0       	ldi	r24, 0x0F	; 15
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	0e 94 03 02 	call	0x406	; 0x406 <delay1ms>
	S65_PORT |= 1<<S65_RST;
     782:	ab e3       	ldi	r26, 0x3B	; 59
     784:	b0 e0       	ldi	r27, 0x00	; 0
     786:	eb e3       	ldi	r30, 0x3B	; 59
     788:	f0 e0       	ldi	r31, 0x00	; 0
     78a:	80 81       	ld	r24, Z
     78c:	82 60       	ori	r24, 0x02	; 2
     78e:	8c 93       	st	X, r24
	delay1ms(60);
     790:	8c e3       	ldi	r24, 0x3C	; 60
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	0e 94 03 02 	call	0x406	; 0x406 <delay1ms>


	s65_cmd(0xbc);
     798:	8c eb       	ldi	r24, 0xBC	; 188
     79a:	0e 94 2a 03 	call	0x654	; 0x654 <s65_cmd>
	s65_data00(0x2a); // 0x2A=565 mode, 0x0A=666mode, 0x3A=444mode
     79e:	8a e2       	ldi	r24, 0x2A	; 42
     7a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <s65_data00>
	
	s65_cmd(0xca);
     7a4:	8a ec       	ldi	r24, 0xCA	; 202
     7a6:	0e 94 2a 03 	call	0x654	; 0x654 <s65_cmd>
	for (i=0;i<9;i++) {
     7aa:	1d 86       	std	Y+13, r1	; 0x0d
     7ac:	11 c0       	rjmp	.+34     	; 0x7d0 <s65_init+0x94>
		s65_data00(pgm_read_byte(&disctl[i]));
     7ae:	8d 85       	ldd	r24, Y+13	; 0x0d
     7b0:	88 2f       	mov	r24, r24
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	84 57       	subi	r24, 0x74	; 116
     7b6:	9c 4f       	sbci	r25, 0xFC	; 252
     7b8:	9c 87       	std	Y+12, r25	; 0x0c
     7ba:	8b 87       	std	Y+11, r24	; 0x0b
     7bc:	eb 85       	ldd	r30, Y+11	; 0x0b
     7be:	fc 85       	ldd	r31, Y+12	; 0x0c
     7c0:	84 91       	lpm	r24, Z+
     7c2:	8a 87       	std	Y+10, r24	; 0x0a
     7c4:	8a 85       	ldd	r24, Y+10	; 0x0a
     7c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <s65_data00>

	s65_cmd(0xbc);
	s65_data00(0x2a); // 0x2A=565 mode, 0x0A=666mode, 0x3A=444mode
	
	s65_cmd(0xca);
	for (i=0;i<9;i++) {
     7ca:	8d 85       	ldd	r24, Y+13	; 0x0d
     7cc:	8f 5f       	subi	r24, 0xFF	; 255
     7ce:	8d 87       	std	Y+13, r24	; 0x0d
     7d0:	8d 85       	ldd	r24, Y+13	; 0x0d
     7d2:	89 30       	cpi	r24, 0x09	; 9
     7d4:	60 f3       	brcs	.-40     	; 0x7ae <s65_init+0x72>
		s65_data00(pgm_read_byte(&disctl[i]));
	}
	
	s65_cmd(0xcb);
     7d6:	8b ec       	ldi	r24, 0xCB	; 203
     7d8:	0e 94 2a 03 	call	0x654	; 0x654 <s65_cmd>
	for (i=0;i<29;i++) {
     7dc:	1d 86       	std	Y+13, r1	; 0x0d
     7de:	14 c0       	rjmp	.+40     	; 0x808 <s65_init+0xcc>
		s65_data00(pgm_read_byte(&gcp64_0[i]));
     7e0:	8d 85       	ldd	r24, Y+13	; 0x0d
     7e2:	88 2f       	mov	r24, r24
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	81 59       	subi	r24, 0x91	; 145
     7e8:	9c 4f       	sbci	r25, 0xFC	; 252
     7ea:	99 87       	std	Y+9, r25	; 0x09
     7ec:	88 87       	std	Y+8, r24	; 0x08
     7ee:	e8 85       	ldd	r30, Y+8	; 0x08
     7f0:	f9 85       	ldd	r31, Y+9	; 0x09
     7f2:	84 91       	lpm	r24, Z+
     7f4:	8f 83       	std	Y+7, r24	; 0x07
     7f6:	8f 81       	ldd	r24, Y+7	; 0x07
     7f8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <s65_data00>
		s65_data00(0x00);
     7fc:	80 e0       	ldi	r24, 0x00	; 0
     7fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <s65_data00>
	for (i=0;i<9;i++) {
		s65_data00(pgm_read_byte(&disctl[i]));
	}
	
	s65_cmd(0xcb);
	for (i=0;i<29;i++) {
     802:	8d 85       	ldd	r24, Y+13	; 0x0d
     804:	8f 5f       	subi	r24, 0xFF	; 255
     806:	8d 87       	std	Y+13, r24	; 0x0d
     808:	8d 85       	ldd	r24, Y+13	; 0x0d
     80a:	8d 31       	cpi	r24, 0x1D	; 29
     80c:	48 f3       	brcs	.-46     	; 0x7e0 <s65_init+0xa4>
		s65_data00(pgm_read_byte(&gcp64_0[i]));
		s65_data00(0x00);
	}
	for (i=0;i<34;i++) {
     80e:	1d 86       	std	Y+13, r1	; 0x0d
     810:	14 c0       	rjmp	.+40     	; 0x83a <s65_init+0xfe>
		s65_data00(pgm_read_byte(&gcp64_1[i]));
     812:	8d 85       	ldd	r24, Y+13	; 0x0d
     814:	88 2f       	mov	r24, r24
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	83 5b       	subi	r24, 0xB3	; 179
     81a:	9c 4f       	sbci	r25, 0xFC	; 252
     81c:	9e 83       	std	Y+6, r25	; 0x06
     81e:	8d 83       	std	Y+5, r24	; 0x05
     820:	ed 81       	ldd	r30, Y+5	; 0x05
     822:	fe 81       	ldd	r31, Y+6	; 0x06
     824:	84 91       	lpm	r24, Z+
     826:	8c 83       	std	Y+4, r24	; 0x04
     828:	8c 81       	ldd	r24, Y+4	; 0x04
     82a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <s65_data00>
		s65_data00(0x01);
     82e:	81 e0       	ldi	r24, 0x01	; 1
     830:	0e 94 79 03 	call	0x6f2	; 0x6f2 <s65_data00>
	s65_cmd(0xcb);
	for (i=0;i<29;i++) {
		s65_data00(pgm_read_byte(&gcp64_0[i]));
		s65_data00(0x00);
	}
	for (i=0;i<34;i++) {
     834:	8d 85       	ldd	r24, Y+13	; 0x0d
     836:	8f 5f       	subi	r24, 0xFF	; 255
     838:	8d 87       	std	Y+13, r24	; 0x0d
     83a:	8d 85       	ldd	r24, Y+13	; 0x0d
     83c:	82 32       	cpi	r24, 0x22	; 34
     83e:	48 f3       	brcs	.-46     	; 0x812 <s65_init+0xd6>
		s65_data00(pgm_read_byte(&gcp64_1[i]));
		s65_data00(0x01);
	}
	
	s65_cmd(0xcc);
     840:	8c ec       	ldi	r24, 0xCC	; 204
     842:	0e 94 2a 03 	call	0x654	; 0x654 <s65_cmd>
	for (i=0;i<15;i++) {
     846:	1d 86       	std	Y+13, r1	; 0x0d
     848:	11 c0       	rjmp	.+34     	; 0x86c <__stack+0xd>
		s65_data00(pgm_read_byte(&gcp16[i]));
     84a:	8d 85       	ldd	r24, Y+13	; 0x0d
     84c:	88 2f       	mov	r24, r24
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	82 5c       	subi	r24, 0xC2	; 194
     852:	9c 4f       	sbci	r25, 0xFC	; 252
     854:	9b 83       	std	Y+3, r25	; 0x03
     856:	8a 83       	std	Y+2, r24	; 0x02
     858:	ea 81       	ldd	r30, Y+2	; 0x02
     85a:	fb 81       	ldd	r31, Y+3	; 0x03
     85c:	84 91       	lpm	r24, Z+
     85e:	89 83       	std	Y+1, r24	; 0x01
     860:	89 81       	ldd	r24, Y+1	; 0x01
     862:	0e 94 79 03 	call	0x6f2	; 0x6f2 <s65_data00>
		s65_data00(pgm_read_byte(&gcp64_1[i]));
		s65_data00(0x01);
	}
	
	s65_cmd(0xcc);
	for (i=0;i<15;i++) {
     866:	8d 85       	ldd	r24, Y+13	; 0x0d
     868:	8f 5f       	subi	r24, 0xFF	; 255
     86a:	8d 87       	std	Y+13, r24	; 0x0d
     86c:	8d 85       	ldd	r24, Y+13	; 0x0d
     86e:	8f 30       	cpi	r24, 0x0F	; 15
     870:	60 f3       	brcs	.-40     	; 0x84a <s65_init+0x10e>
		s65_data00(pgm_read_byte(&gcp16[i]));
	}
  
	s65_cmd(0xcd);
     872:	8d ec       	ldi	r24, 0xCD	; 205
     874:	0e 94 2a 03 	call	0x654	; 0x654 <s65_cmd>
	s65_data00(0x00);
     878:	80 e0       	ldi	r24, 0x00	; 0
     87a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <s65_data00>
	
	s65_cmd(0xd0);
     87e:	80 ed       	ldi	r24, 0xD0	; 208
     880:	0e 94 2a 03 	call	0x654	; 0x654 <s65_cmd>
	s65_data00(0x00);
     884:	80 e0       	ldi	r24, 0x00	; 0
     886:	0e 94 79 03 	call	0x6f2	; 0x6f2 <s65_data00>
	
	s65_cmd(0x94);
     88a:	84 e9       	ldi	r24, 0x94	; 148
     88c:	0e 94 2a 03 	call	0x654	; 0x654 <s65_cmd>

	s65_cmd(0x15);
     890:	85 e1       	ldi	r24, 0x15	; 21
     892:	0e 94 2a 03 	call	0x654	; 0x654 <s65_cmd>
	s65_data00(0x08);
     896:	88 e0       	ldi	r24, 0x08	; 8
     898:	0e 94 79 03 	call	0x6f2	; 0x6f2 <s65_data00>
	s65_data00(0x01);
     89c:	81 e0       	ldi	r24, 0x01	; 1
     89e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <s65_data00>
	s65_data00(0x8b);
     8a2:	8b e8       	ldi	r24, 0x8B	; 139
     8a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <s65_data00>
	s65_data00(0x01);
     8a8:	81 e0       	ldi	r24, 0x01	; 1
     8aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <s65_data00>
	
	s65_cmd(0x75);
     8ae:	85 e7       	ldi	r24, 0x75	; 117
     8b0:	0e 94 2a 03 	call	0x654	; 0x654 <s65_cmd>
	s65_data00(0x00);
     8b4:	80 e0       	ldi	r24, 0x00	; 0
     8b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <s65_data00>
	s65_data00(0x8f);
     8ba:	8f e8       	ldi	r24, 0x8F	; 143
     8bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <s65_data00>

	s65_cmd(0xaa);
     8c0:	8a ea       	ldi	r24, 0xAA	; 170
     8c2:	0e 94 2a 03 	call	0x654	; 0x654 <s65_cmd>
	s65_data00(0x00);
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <s65_data00>
	s65_data00(0xaf);
     8cc:	8f ea       	ldi	r24, 0xAF	; 175
     8ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <s65_data00>
	s65_data00(0xaf);
     8d2:	8f ea       	ldi	r24, 0xAF	; 175
     8d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <s65_data00>
	s65_data00(0x03);
     8d8:	83 e0       	ldi	r24, 0x03	; 3
     8da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <s65_data00>

	s65_cmd(0xab);
     8de:	8b ea       	ldi	r24, 0xAB	; 171
     8e0:	0e 94 2a 03 	call	0x654	; 0x654 <s65_cmd>
	s65_data00(0x00);
     8e4:	80 e0       	ldi	r24, 0x00	; 0
     8e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <s65_data00>
  
	s65_cmd(0xaf);
     8ea:	8f ea       	ldi	r24, 0xAF	; 175
     8ec:	0e 94 2a 03 	call	0x654	; 0x654 <s65_cmd>
	// ready ?
}
     8f0:	2d 96       	adiw	r28, 0x0d	; 13
     8f2:	0f b6       	in	r0, 0x3f	; 63
     8f4:	f8 94       	cli
     8f6:	de bf       	out	0x3e, r29	; 62
     8f8:	0f be       	out	0x3f, r0	; 63
     8fa:	cd bf       	out	0x3d, r28	; 61
     8fc:	cf 91       	pop	r28
     8fe:	df 91       	pop	r29
     900:	08 95       	ret

00000902 <s65_fill>:

void s65_fill(uint16_t color) {
     902:	df 93       	push	r29
     904:	cf 93       	push	r28
     906:	00 d0       	rcall	.+0      	; 0x908 <s65_fill+0x6>
     908:	00 d0       	rcall	.+0      	; 0x90a <s65_fill+0x8>
     90a:	cd b7       	in	r28, 0x3d	; 61
     90c:	de b7       	in	r29, 0x3e	; 62
     90e:	9c 83       	std	Y+4, r25	; 0x04
     910:	8b 83       	std	Y+3, r24	; 0x03

	// start, end: X
	s65_cmd(0x15); 
     912:	85 e1       	ldi	r24, 0x15	; 21
     914:	0e 94 2a 03 	call	0x654	; 0x654 <s65_cmd>
	s65_data00(8+0); // start X
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <s65_data00>
	s65_data00(0x01); // why ?
     91e:	81 e0       	ldi	r24, 0x01	; 1
     920:	0e 94 79 03 	call	0x6f2	; 0x6f2 <s65_data00>
	s65_data00(8+S65_WIDTH-1); // end X
     924:	8b e8       	ldi	r24, 0x8B	; 139
     926:	0e 94 79 03 	call	0x6f2	; 0x6f2 <s65_data00>
	s65_data00(0x01); // why ?
     92a:	81 e0       	ldi	r24, 0x01	; 1
     92c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <s65_data00>
	
	// start, end: Y
	s65_cmd(0x75);
     930:	85 e7       	ldi	r24, 0x75	; 117
     932:	0e 94 2a 03 	call	0x654	; 0x654 <s65_cmd>
	s65_data00(0x00); // start y
     936:	80 e0       	ldi	r24, 0x00	; 0
     938:	0e 94 79 03 	call	0x6f2	; 0x6f2 <s65_data00>
	s65_data00(S65_HEIGHT-1); // end y
     93c:	8f ea       	ldi	r24, 0xAF	; 175
     93e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <s65_data00>
	
	s65_cmd(0x5c); // MEM WRITE
     942:	8c e5       	ldi	r24, 0x5C	; 92
     944:	0e 94 2a 03 	call	0x654	; 0x654 <s65_cmd>
	s65_select;
     948:	ab e3       	ldi	r26, 0x3B	; 59
     94a:	b0 e0       	ldi	r27, 0x00	; 0
     94c:	eb e3       	ldi	r30, 0x3B	; 59
     94e:	f0 e0       	ldi	r31, 0x00	; 0
     950:	80 81       	ld	r24, Z
     952:	8b 7f       	andi	r24, 0xFB	; 251
     954:	8c 93       	st	X, r24
	for (uint16_t t=0;t<(132*176);t++) {
     956:	1a 82       	std	Y+2, r1	; 0x02
     958:	19 82       	std	Y+1, r1	; 0x01
     95a:	09 c0       	rjmp	.+18     	; 0x96e <s65_fill+0x6c>
		s65_data16(color);
     95c:	8b 81       	ldd	r24, Y+3	; 0x03
     95e:	9c 81       	ldd	r25, Y+4	; 0x04
     960:	0e 94 4f 03 	call	0x69e	; 0x69e <s65_data16>
	s65_data00(0x00); // start y
	s65_data00(S65_HEIGHT-1); // end y
	
	s65_cmd(0x5c); // MEM WRITE
	s65_select;
	for (uint16_t t=0;t<(132*176);t++) {
     964:	89 81       	ldd	r24, Y+1	; 0x01
     966:	9a 81       	ldd	r25, Y+2	; 0x02
     968:	01 96       	adiw	r24, 0x01	; 1
     96a:	9a 83       	std	Y+2, r25	; 0x02
     96c:	89 83       	std	Y+1, r24	; 0x01
     96e:	89 81       	ldd	r24, Y+1	; 0x01
     970:	9a 81       	ldd	r25, Y+2	; 0x02
     972:	2a e5       	ldi	r18, 0x5A	; 90
     974:	80 3c       	cpi	r24, 0xC0	; 192
     976:	92 07       	cpc	r25, r18
     978:	88 f3       	brcs	.-30     	; 0x95c <s65_fill+0x5a>
		s65_data16(color);
	}
	s65_deselect;
     97a:	ab e3       	ldi	r26, 0x3B	; 59
     97c:	b0 e0       	ldi	r27, 0x00	; 0
     97e:	eb e3       	ldi	r30, 0x3B	; 59
     980:	f0 e0       	ldi	r31, 0x00	; 0
     982:	80 81       	ld	r24, Z
     984:	84 60       	ori	r24, 0x04	; 4
     986:	8c 93       	st	X, r24
}
     988:	0f 90       	pop	r0
     98a:	0f 90       	pop	r0
     98c:	0f 90       	pop	r0
     98e:	0f 90       	pop	r0
     990:	cf 91       	pop	r28
     992:	df 91       	pop	r29
     994:	08 95       	ret

00000996 <swap_bytes>:

//#if (S65_FUNC_DRAW_PROG==1 || S65_FUNC_DRAW==1)
// ------------------------------------- always enabled :P
void swap_bytes(uint8_t *b1, uint8_t *b2) {
     996:	df 93       	push	r29
     998:	cf 93       	push	r28
     99a:	00 d0       	rcall	.+0      	; 0x99c <swap_bytes+0x6>
     99c:	00 d0       	rcall	.+0      	; 0x99e <swap_bytes+0x8>
     99e:	0f 92       	push	r0
     9a0:	cd b7       	in	r28, 0x3d	; 61
     9a2:	de b7       	in	r29, 0x3e	; 62
     9a4:	9b 83       	std	Y+3, r25	; 0x03
     9a6:	8a 83       	std	Y+2, r24	; 0x02
     9a8:	7d 83       	std	Y+5, r23	; 0x05
     9aa:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t b=*b1;
     9ac:	ea 81       	ldd	r30, Y+2	; 0x02
     9ae:	fb 81       	ldd	r31, Y+3	; 0x03
     9b0:	80 81       	ld	r24, Z
     9b2:	89 83       	std	Y+1, r24	; 0x01
	*b1=*b2;
     9b4:	ec 81       	ldd	r30, Y+4	; 0x04
     9b6:	fd 81       	ldd	r31, Y+5	; 0x05
     9b8:	80 81       	ld	r24, Z
     9ba:	ea 81       	ldd	r30, Y+2	; 0x02
     9bc:	fb 81       	ldd	r31, Y+3	; 0x03
     9be:	80 83       	st	Z, r24
	*b2=b;
     9c0:	ec 81       	ldd	r30, Y+4	; 0x04
     9c2:	fd 81       	ldd	r31, Y+5	; 0x05
     9c4:	89 81       	ldd	r24, Y+1	; 0x01
     9c6:	80 83       	st	Z, r24
}
     9c8:	0f 90       	pop	r0
     9ca:	0f 90       	pop	r0
     9cc:	0f 90       	pop	r0
     9ce:	0f 90       	pop	r0
     9d0:	0f 90       	pop	r0
     9d2:	cf 91       	pop	r28
     9d4:	df 91       	pop	r29
     9d6:	08 95       	ret

000009d8 <s65_frame>:
//#endif

#if S65_FUNC_PIXEL==1

void s65_frame(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2) {
     9d8:	df 93       	push	r29
     9da:	cf 93       	push	r28
     9dc:	00 d0       	rcall	.+0      	; 0x9de <s65_frame+0x6>
     9de:	00 d0       	rcall	.+0      	; 0x9e0 <s65_frame+0x8>
     9e0:	cd b7       	in	r28, 0x3d	; 61
     9e2:	de b7       	in	r29, 0x3e	; 62
     9e4:	89 83       	std	Y+1, r24	; 0x01
     9e6:	6a 83       	std	Y+2, r22	; 0x02
     9e8:	4b 83       	std	Y+3, r20	; 0x03
     9ea:	2c 83       	std	Y+4, r18	; 0x04
	//uint16_t i;
	
	if (x1>x2) swap_bytes(&x1,&x2);
     9ec:	99 81       	ldd	r25, Y+1	; 0x01
     9ee:	8b 81       	ldd	r24, Y+3	; 0x03
     9f0:	89 17       	cp	r24, r25
     9f2:	40 f4       	brcc	.+16     	; 0xa04 <s65_frame+0x2c>
     9f4:	9e 01       	movw	r18, r28
     9f6:	2d 5f       	subi	r18, 0xFD	; 253
     9f8:	3f 4f       	sbci	r19, 0xFF	; 255
     9fa:	ce 01       	movw	r24, r28
     9fc:	01 96       	adiw	r24, 0x01	; 1
     9fe:	b9 01       	movw	r22, r18
     a00:	0e 94 cb 04 	call	0x996	; 0x996 <swap_bytes>
	if (y1>y2) swap_bytes(&y1,&y2);
     a04:	9a 81       	ldd	r25, Y+2	; 0x02
     a06:	8c 81       	ldd	r24, Y+4	; 0x04
     a08:	89 17       	cp	r24, r25
     a0a:	40 f4       	brcc	.+16     	; 0xa1c <s65_frame+0x44>
     a0c:	ce 01       	movw	r24, r28
     a0e:	02 96       	adiw	r24, 0x02	; 2
     a10:	9e 01       	movw	r18, r28
     a12:	2c 5f       	subi	r18, 0xFC	; 252
     a14:	3f 4f       	sbci	r19, 0xFF	; 255
     a16:	b9 01       	movw	r22, r18
     a18:	0e 94 cb 04 	call	0x996	; 0x996 <swap_bytes>
		//s65_cmd(0x05);
		//s65_data(0x0038);
	#endif
	
	// start, end: X
	s65_cmd(0x15); 
     a1c:	85 e1       	ldi	r24, 0x15	; 21
     a1e:	0e 94 2a 03 	call	0x654	; 0x654 <s65_cmd>
	s65_data00(8+x1); // start X
     a22:	89 81       	ldd	r24, Y+1	; 0x01
     a24:	88 5f       	subi	r24, 0xF8	; 248
     a26:	0e 94 79 03 	call	0x6f2	; 0x6f2 <s65_data00>
	s65_data00(0x01); // why ?
     a2a:	81 e0       	ldi	r24, 0x01	; 1
     a2c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <s65_data00>
	s65_data00(8+x2); // end X
     a30:	8b 81       	ldd	r24, Y+3	; 0x03
     a32:	88 5f       	subi	r24, 0xF8	; 248
     a34:	0e 94 79 03 	call	0x6f2	; 0x6f2 <s65_data00>
	s65_data00(0x01); // why ?
     a38:	81 e0       	ldi	r24, 0x01	; 1
     a3a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <s65_data00>
	
	// start, end: Y
	s65_cmd(0x75);
     a3e:	85 e7       	ldi	r24, 0x75	; 117
     a40:	0e 94 2a 03 	call	0x654	; 0x654 <s65_cmd>
	s65_data00(y1); // start y
     a44:	8a 81       	ldd	r24, Y+2	; 0x02
     a46:	0e 94 79 03 	call	0x6f2	; 0x6f2 <s65_data00>
	s65_data00(y2); // end y
     a4a:	8c 81       	ldd	r24, Y+4	; 0x04
     a4c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <s65_data00>
		//s65_data(i);
		//s65_cmd(0x16);
		////i=(y2<<8)|y1;
		//s65_data(i);
	#endif
}
     a50:	0f 90       	pop	r0
     a52:	0f 90       	pop	r0
     a54:	0f 90       	pop	r0
     a56:	0f 90       	pop	r0
     a58:	cf 91       	pop	r28
     a5a:	df 91       	pop	r29
     a5c:	08 95       	ret

00000a5e <s65_pix>:

void s65_pix(uint8_t x, uint8_t y, uint16_t color) {
     a5e:	df 93       	push	r29
     a60:	cf 93       	push	r28
     a62:	00 d0       	rcall	.+0      	; 0xa64 <s65_pix+0x6>
     a64:	00 d0       	rcall	.+0      	; 0xa66 <s65_pix+0x8>
     a66:	cd b7       	in	r28, 0x3d	; 61
     a68:	de b7       	in	r29, 0x3e	; 62
     a6a:	89 83       	std	Y+1, r24	; 0x01
     a6c:	6a 83       	std	Y+2, r22	; 0x02
     a6e:	5c 83       	std	Y+4, r21	; 0x04
     a70:	4b 83       	std	Y+3, r20	; 0x03

	s65_frame(x,y,x,y);
     a72:	89 81       	ldd	r24, Y+1	; 0x01
     a74:	6a 81       	ldd	r22, Y+2	; 0x02
     a76:	49 81       	ldd	r20, Y+1	; 0x01
     a78:	2a 81       	ldd	r18, Y+2	; 0x02
     a7a:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <s65_frame>
	s65_cmd(0x5c);
     a7e:	8c e5       	ldi	r24, 0x5C	; 92
     a80:	0e 94 2a 03 	call	0x654	; 0x654 <s65_cmd>
	s65_data16(color);
     a84:	8b 81       	ldd	r24, Y+3	; 0x03
     a86:	9c 81       	ldd	r25, Y+4	; 0x04
     a88:	0e 94 4f 03 	call	0x69e	; 0x69e <s65_data16>
	#else
		//s65_data((uint16_t)(((175-x)<<8)|y)); // x,y
	#endif
	// color

}
     a8c:	0f 90       	pop	r0
     a8e:	0f 90       	pop	r0
     a90:	0f 90       	pop	r0
     a92:	0f 90       	pop	r0
     a94:	cf 91       	pop	r28
     a96:	df 91       	pop	r29
     a98:	08 95       	ret

00000a9a <s65_lineH>:
// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


#if S65_LINE_H == 1
void s65_lineH(uint8_t x, uint8_t y, uint8_t w, uint16_t color) {
     a9a:	df 93       	push	r29
     a9c:	cf 93       	push	r28
     a9e:	00 d0       	rcall	.+0      	; 0xaa0 <s65_lineH+0x6>
     aa0:	00 d0       	rcall	.+0      	; 0xaa2 <s65_lineH+0x8>
     aa2:	0f 92       	push	r0
     aa4:	cd b7       	in	r28, 0x3d	; 61
     aa6:	de b7       	in	r29, 0x3e	; 62
     aa8:	89 83       	std	Y+1, r24	; 0x01
     aaa:	6a 83       	std	Y+2, r22	; 0x02
     aac:	4b 83       	std	Y+3, r20	; 0x03
     aae:	3d 83       	std	Y+5, r19	; 0x05
     ab0:	2c 83       	std	Y+4, r18	; 0x04
	if (x >= S65_WIDTH) x = S65_WIDTH-1;
     ab2:	89 81       	ldd	r24, Y+1	; 0x01
     ab4:	84 38       	cpi	r24, 0x84	; 132
     ab6:	10 f0       	brcs	.+4      	; 0xabc <s65_lineH+0x22>
     ab8:	83 e8       	ldi	r24, 0x83	; 131
     aba:	89 83       	std	Y+1, r24	; 0x01
	if (y >= S65_HEIGHT) y = S65_HEIGHT-1;
     abc:	8a 81       	ldd	r24, Y+2	; 0x02
     abe:	80 3b       	cpi	r24, 0xB0	; 176
     ac0:	10 f0       	brcs	.+4      	; 0xac6 <s65_lineH+0x2c>
     ac2:	8f ea       	ldi	r24, 0xAF	; 175
     ac4:	8a 83       	std	Y+2, r24	; 0x02
	w = w+x;
     ac6:	9b 81       	ldd	r25, Y+3	; 0x03
     ac8:	89 81       	ldd	r24, Y+1	; 0x01
     aca:	89 0f       	add	r24, r25
     acc:	8b 83       	std	Y+3, r24	; 0x03
	if (w>= S65_WIDTH) w = S65_WIDTH-1;
     ace:	8b 81       	ldd	r24, Y+3	; 0x03
     ad0:	84 38       	cpi	r24, 0x84	; 132
     ad2:	68 f0       	brcs	.+26     	; 0xaee <s65_lineH+0x54>
     ad4:	83 e8       	ldi	r24, 0x83	; 131
     ad6:	8b 83       	std	Y+3, r24	; 0x03
     ad8:	0a c0       	rjmp	.+20     	; 0xaee <s65_lineH+0x54>
	
	//s65_frame(x,y,w,y);
	for (;x<=w;x++) s65_pix(x,y,color);
     ada:	2c 81       	ldd	r18, Y+4	; 0x04
     adc:	3d 81       	ldd	r19, Y+5	; 0x05
     ade:	89 81       	ldd	r24, Y+1	; 0x01
     ae0:	6a 81       	ldd	r22, Y+2	; 0x02
     ae2:	a9 01       	movw	r20, r18
     ae4:	0e 94 2f 05 	call	0xa5e	; 0xa5e <s65_pix>
     ae8:	89 81       	ldd	r24, Y+1	; 0x01
     aea:	8f 5f       	subi	r24, 0xFF	; 255
     aec:	89 83       	std	Y+1, r24	; 0x01
     aee:	99 81       	ldd	r25, Y+1	; 0x01
     af0:	8b 81       	ldd	r24, Y+3	; 0x03
     af2:	89 17       	cp	r24, r25
     af4:	90 f7       	brcc	.-28     	; 0xada <s65_lineH+0x40>
}
     af6:	0f 90       	pop	r0
     af8:	0f 90       	pop	r0
     afa:	0f 90       	pop	r0
     afc:	0f 90       	pop	r0
     afe:	0f 90       	pop	r0
     b00:	cf 91       	pop	r28
     b02:	df 91       	pop	r29
     b04:	08 95       	ret

00000b06 <s65_lineV>:
#endif

#if S65_LINE_V == 1
void s65_lineV(uint8_t x, uint8_t y, uint8_t h, uint16_t color) {
     b06:	df 93       	push	r29
     b08:	cf 93       	push	r28
     b0a:	00 d0       	rcall	.+0      	; 0xb0c <s65_lineV+0x6>
     b0c:	00 d0       	rcall	.+0      	; 0xb0e <s65_lineV+0x8>
     b0e:	0f 92       	push	r0
     b10:	cd b7       	in	r28, 0x3d	; 61
     b12:	de b7       	in	r29, 0x3e	; 62
     b14:	89 83       	std	Y+1, r24	; 0x01
     b16:	6a 83       	std	Y+2, r22	; 0x02
     b18:	4b 83       	std	Y+3, r20	; 0x03
     b1a:	3d 83       	std	Y+5, r19	; 0x05
     b1c:	2c 83       	std	Y+4, r18	; 0x04
	
	if (x >= S65_WIDTH) x = S65_WIDTH-1;
     b1e:	89 81       	ldd	r24, Y+1	; 0x01
     b20:	84 38       	cpi	r24, 0x84	; 132
     b22:	10 f0       	brcs	.+4      	; 0xb28 <s65_lineV+0x22>
     b24:	83 e8       	ldi	r24, 0x83	; 131
     b26:	89 83       	std	Y+1, r24	; 0x01
	if (y >= S65_HEIGHT) y = S65_HEIGHT-1;
     b28:	8a 81       	ldd	r24, Y+2	; 0x02
     b2a:	80 3b       	cpi	r24, 0xB0	; 176
     b2c:	10 f0       	brcs	.+4      	; 0xb32 <s65_lineV+0x2c>
     b2e:	8f ea       	ldi	r24, 0xAF	; 175
     b30:	8a 83       	std	Y+2, r24	; 0x02
	h = h+y;
     b32:	9b 81       	ldd	r25, Y+3	; 0x03
     b34:	8a 81       	ldd	r24, Y+2	; 0x02
     b36:	89 0f       	add	r24, r25
     b38:	8b 83       	std	Y+3, r24	; 0x03
	if (h>= S65_HEIGHT) h = S65_HEIGHT-1;
     b3a:	8b 81       	ldd	r24, Y+3	; 0x03
     b3c:	80 3b       	cpi	r24, 0xB0	; 176
     b3e:	10 f0       	brcs	.+4      	; 0xb44 <s65_lineV+0x3e>
     b40:	8f ea       	ldi	r24, 0xAF	; 175
     b42:	8b 83       	std	Y+3, r24	; 0x03
	
	s65_frame(x,y,x,y+h);
     b44:	8a 81       	ldd	r24, Y+2	; 0x02
     b46:	9b 81       	ldd	r25, Y+3	; 0x03
     b48:	98 0f       	add	r25, r24
     b4a:	89 81       	ldd	r24, Y+1	; 0x01
     b4c:	6a 81       	ldd	r22, Y+2	; 0x02
     b4e:	49 81       	ldd	r20, Y+1	; 0x01
     b50:	29 2f       	mov	r18, r25
     b52:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <s65_frame>
     b56:	0a c0       	rjmp	.+20     	; 0xb6c <s65_lineV+0x66>
	for (;y<=h;y++) s65_pix(x,y,color);
     b58:	2c 81       	ldd	r18, Y+4	; 0x04
     b5a:	3d 81       	ldd	r19, Y+5	; 0x05
     b5c:	89 81       	ldd	r24, Y+1	; 0x01
     b5e:	6a 81       	ldd	r22, Y+2	; 0x02
     b60:	a9 01       	movw	r20, r18
     b62:	0e 94 2f 05 	call	0xa5e	; 0xa5e <s65_pix>
     b66:	8a 81       	ldd	r24, Y+2	; 0x02
     b68:	8f 5f       	subi	r24, 0xFF	; 255
     b6a:	8a 83       	std	Y+2, r24	; 0x02
     b6c:	9a 81       	ldd	r25, Y+2	; 0x02
     b6e:	8b 81       	ldd	r24, Y+3	; 0x03
     b70:	89 17       	cp	r24, r25
     b72:	90 f7       	brcc	.-28     	; 0xb58 <s65_lineV+0x52>
}
     b74:	0f 90       	pop	r0
     b76:	0f 90       	pop	r0
     b78:	0f 90       	pop	r0
     b7a:	0f 90       	pop	r0
     b7c:	0f 90       	pop	r0
     b7e:	cf 91       	pop	r28
     b80:	df 91       	pop	r29
     b82:	08 95       	ret

00000b84 <s65_line>:
#endif

#if S65_LINE == 1
void s65_line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, uint16_t color) {
     b84:	0f 93       	push	r16
     b86:	1f 93       	push	r17
     b88:	df 93       	push	r29
     b8a:	cf 93       	push	r28
     b8c:	cd b7       	in	r28, 0x3d	; 61
     b8e:	de b7       	in	r29, 0x3e	; 62
     b90:	66 97       	sbiw	r28, 0x16	; 22
     b92:	0f b6       	in	r0, 0x3f	; 63
     b94:	f8 94       	cli
     b96:	de bf       	out	0x3e, r29	; 62
     b98:	0f be       	out	0x3f, r0	; 63
     b9a:	cd bf       	out	0x3d, r28	; 61
     b9c:	89 8b       	std	Y+17, r24	; 0x11
     b9e:	6a 8b       	std	Y+18, r22	; 0x12
     ba0:	4b 8b       	std	Y+19, r20	; 0x13
     ba2:	2c 8b       	std	Y+20, r18	; 0x14
     ba4:	1e 8b       	std	Y+22, r17	; 0x16
     ba6:	0d 8b       	std	Y+21, r16	; 0x15
	int16_t dx,dy,sx,sy,f;
	uint16_t i;
	
	if (x1 > x2) {
     ba8:	99 89       	ldd	r25, Y+17	; 0x11
     baa:	8b 89       	ldd	r24, Y+19	; 0x13
     bac:	89 17       	cp	r24, r25
     bae:	60 f4       	brcc	.+24     	; 0xbc8 <s65_line+0x44>
		XCHG(x1,x2,uint8_t);
     bb0:	8b 89       	ldd	r24, Y+19	; 0x13
     bb2:	8c 83       	std	Y+4, r24	; 0x04
     bb4:	89 89       	ldd	r24, Y+17	; 0x11
     bb6:	8b 8b       	std	Y+19, r24	; 0x13
     bb8:	8c 81       	ldd	r24, Y+4	; 0x04
     bba:	89 8b       	std	Y+17, r24	; 0x11
		XCHG(y1,y2,uint8_t);
     bbc:	8c 89       	ldd	r24, Y+20	; 0x14
     bbe:	8b 83       	std	Y+3, r24	; 0x03
     bc0:	8a 89       	ldd	r24, Y+18	; 0x12
     bc2:	8c 8b       	std	Y+20, r24	; 0x14
     bc4:	8b 81       	ldd	r24, Y+3	; 0x03
     bc6:	8a 8b       	std	Y+18, r24	; 0x12
	}
	
	if (y1 > y2) {
     bc8:	9a 89       	ldd	r25, Y+18	; 0x12
     bca:	8c 89       	ldd	r24, Y+20	; 0x14
     bcc:	89 17       	cp	r24, r25
     bce:	60 f4       	brcc	.+24     	; 0xbe8 <s65_line+0x64>
		XCHG(x1,x2,uint8_t);
     bd0:	8b 89       	ldd	r24, Y+19	; 0x13
     bd2:	8a 83       	std	Y+2, r24	; 0x02
     bd4:	89 89       	ldd	r24, Y+17	; 0x11
     bd6:	8b 8b       	std	Y+19, r24	; 0x13
     bd8:	8a 81       	ldd	r24, Y+2	; 0x02
     bda:	89 8b       	std	Y+17, r24	; 0x11
		XCHG(y1,y2,uint8_t);
     bdc:	8c 89       	ldd	r24, Y+20	; 0x14
     bde:	89 83       	std	Y+1, r24	; 0x01
     be0:	8a 89       	ldd	r24, Y+18	; 0x12
     be2:	8c 8b       	std	Y+20, r24	; 0x14
     be4:	89 81       	ldd	r24, Y+1	; 0x01
     be6:	8a 8b       	std	Y+18, r24	; 0x12
	}
	
	if (x1 == x2) {
     be8:	99 89       	ldd	r25, Y+17	; 0x11
     bea:	8b 89       	ldd	r24, Y+19	; 0x13
     bec:	98 17       	cp	r25, r24
     bee:	59 f4       	brne	.+22     	; 0xc06 <s65_line+0x82>
		s65_lineV(x1,y1,(y2-y1),color);
     bf0:	9c 89       	ldd	r25, Y+20	; 0x14
     bf2:	8a 89       	ldd	r24, Y+18	; 0x12
     bf4:	98 1b       	sub	r25, r24
     bf6:	2d 89       	ldd	r18, Y+21	; 0x15
     bf8:	3e 89       	ldd	r19, Y+22	; 0x16
     bfa:	89 89       	ldd	r24, Y+17	; 0x11
     bfc:	6a 89       	ldd	r22, Y+18	; 0x12
     bfe:	49 2f       	mov	r20, r25
     c00:	0e 94 83 05 	call	0xb06	; 0xb06 <s65_lineV>
     c04:	e7 c0       	rjmp	.+462    	; 0xdd4 <s65_line+0x250>
		return;
	}
	
	if (y1 == y2) {
     c06:	9a 89       	ldd	r25, Y+18	; 0x12
     c08:	8c 89       	ldd	r24, Y+20	; 0x14
     c0a:	98 17       	cp	r25, r24
     c0c:	59 f4       	brne	.+22     	; 0xc24 <s65_line+0xa0>
		s65_lineH(x1,x1,(x2-x1),color);
     c0e:	9b 89       	ldd	r25, Y+19	; 0x13
     c10:	89 89       	ldd	r24, Y+17	; 0x11
     c12:	98 1b       	sub	r25, r24
     c14:	2d 89       	ldd	r18, Y+21	; 0x15
     c16:	3e 89       	ldd	r19, Y+22	; 0x16
     c18:	89 89       	ldd	r24, Y+17	; 0x11
     c1a:	69 89       	ldd	r22, Y+17	; 0x11
     c1c:	49 2f       	mov	r20, r25
     c1e:	0e 94 4d 05 	call	0xa9a	; 0xa9a <s65_lineH>
     c22:	d8 c0       	rjmp	.+432    	; 0xdd4 <s65_line+0x250>
	// drawinf window
	#if !defined(S65_TYPE_L2F50)
	s65_frame(x1,y1,x2,y2);
	#endif
	
	dx = x2 - x1;
     c24:	8b 89       	ldd	r24, Y+19	; 0x13
     c26:	28 2f       	mov	r18, r24
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	89 89       	ldd	r24, Y+17	; 0x11
     c2c:	88 2f       	mov	r24, r24
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	a9 01       	movw	r20, r18
     c32:	48 1b       	sub	r20, r24
     c34:	59 0b       	sbc	r21, r25
     c36:	ca 01       	movw	r24, r20
     c38:	98 8b       	std	Y+16, r25	; 0x10
     c3a:	8f 87       	std	Y+15, r24	; 0x0f
	dy = y2 - y1;
     c3c:	8c 89       	ldd	r24, Y+20	; 0x14
     c3e:	28 2f       	mov	r18, r24
     c40:	30 e0       	ldi	r19, 0x00	; 0
     c42:	8a 89       	ldd	r24, Y+18	; 0x12
     c44:	88 2f       	mov	r24, r24
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	a9 01       	movw	r20, r18
     c4a:	48 1b       	sub	r20, r24
     c4c:	59 0b       	sbc	r21, r25
     c4e:	ca 01       	movw	r24, r20
     c50:	9e 87       	std	Y+14, r25	; 0x0e
     c52:	8d 87       	std	Y+13, r24	; 0x0d
	
	if (dx < 0) {
     c54:	8f 85       	ldd	r24, Y+15	; 0x0f
     c56:	98 89       	ldd	r25, Y+16	; 0x10
     c58:	99 23       	and	r25, r25
     c5a:	64 f4       	brge	.+24     	; 0xc74 <s65_line+0xf0>
		dx = -dx;
     c5c:	8f 85       	ldd	r24, Y+15	; 0x0f
     c5e:	98 89       	ldd	r25, Y+16	; 0x10
     c60:	90 95       	com	r25
     c62:	81 95       	neg	r24
     c64:	9f 4f       	sbci	r25, 0xFF	; 255
     c66:	98 8b       	std	Y+16, r25	; 0x10
     c68:	8f 87       	std	Y+15, r24	; 0x0f
		sx = -1;
     c6a:	8f ef       	ldi	r24, 0xFF	; 255
     c6c:	9f ef       	ldi	r25, 0xFF	; 255
     c6e:	9c 87       	std	Y+12, r25	; 0x0c
     c70:	8b 87       	std	Y+11, r24	; 0x0b
     c72:	04 c0       	rjmp	.+8      	; 0xc7c <s65_line+0xf8>
	} else {
		sx = 1;
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	9c 87       	std	Y+12, r25	; 0x0c
     c7a:	8b 87       	std	Y+11, r24	; 0x0b
	}
	
	if (dy < 0) {
     c7c:	8d 85       	ldd	r24, Y+13	; 0x0d
     c7e:	9e 85       	ldd	r25, Y+14	; 0x0e
     c80:	99 23       	and	r25, r25
     c82:	64 f4       	brge	.+24     	; 0xc9c <s65_line+0x118>
		dy = -dy;
     c84:	8d 85       	ldd	r24, Y+13	; 0x0d
     c86:	9e 85       	ldd	r25, Y+14	; 0x0e
     c88:	90 95       	com	r25
     c8a:	81 95       	neg	r24
     c8c:	9f 4f       	sbci	r25, 0xFF	; 255
     c8e:	9e 87       	std	Y+14, r25	; 0x0e
     c90:	8d 87       	std	Y+13, r24	; 0x0d
		sy = -1;
     c92:	8f ef       	ldi	r24, 0xFF	; 255
     c94:	9f ef       	ldi	r25, 0xFF	; 255
     c96:	9a 87       	std	Y+10, r25	; 0x0a
     c98:	89 87       	std	Y+9, r24	; 0x09
     c9a:	04 c0       	rjmp	.+8      	; 0xca4 <s65_line+0x120>
	} else {
		sy = 1;
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	9a 87       	std	Y+10, r25	; 0x0a
     ca2:	89 87       	std	Y+9, r24	; 0x09
	}

	dx <<= 1; // Shift Dx , Left , 1  '-2
     ca4:	8f 85       	ldd	r24, Y+15	; 0x0f
     ca6:	98 89       	ldd	r25, Y+16	; 0x10
     ca8:	88 0f       	add	r24, r24
     caa:	99 1f       	adc	r25, r25
     cac:	98 8b       	std	Y+16, r25	; 0x10
     cae:	8f 87       	std	Y+15, r24	; 0x0f
	dy <<= 1; // Shift Dy , Left , 1  '-2
     cb0:	8d 85       	ldd	r24, Y+13	; 0x0d
     cb2:	9e 85       	ldd	r25, Y+14	; 0x0e
     cb4:	88 0f       	add	r24, r24
     cb6:	99 1f       	adc	r25, r25
     cb8:	9e 87       	std	Y+14, r25	; 0x0e
     cba:	8d 87       	std	Y+13, r24	; 0x0d
	
	s65_pix(x1,y1,color); // Call Lcdpixel(x1 , Y1 , Pixelmode)
     cbc:	2d 89       	ldd	r18, Y+21	; 0x15
     cbe:	3e 89       	ldd	r19, Y+22	; 0x16
     cc0:	89 89       	ldd	r24, Y+17	; 0x11
     cc2:	6a 89       	ldd	r22, Y+18	; 0x12
     cc4:	a9 01       	movw	r20, r18
     cc6:	0e 94 2f 05 	call	0xa5e	; 0xa5e <s65_pix>

	if (dx > dy) {
     cca:	2f 85       	ldd	r18, Y+15	; 0x0f
     ccc:	38 89       	ldd	r19, Y+16	; 0x10
     cce:	8d 85       	ldd	r24, Y+13	; 0x0d
     cd0:	9e 85       	ldd	r25, Y+14	; 0x0e
     cd2:	82 17       	cp	r24, r18
     cd4:	93 07       	cpc	r25, r19
     cd6:	0c f0       	brlt	.+2      	; 0xcda <s65_line+0x156>
     cd8:	3f c0       	rjmp	.+126    	; 0xd58 <s65_line+0x1d4>
		i = dx;
     cda:	8f 85       	ldd	r24, Y+15	; 0x0f
     cdc:	98 89       	ldd	r25, Y+16	; 0x10
     cde:	9e 83       	std	Y+6, r25	; 0x06
     ce0:	8d 83       	std	Y+5, r24	; 0x05
		i >>= 1;
     ce2:	8d 81       	ldd	r24, Y+5	; 0x05
     ce4:	9e 81       	ldd	r25, Y+6	; 0x06
     ce6:	96 95       	lsr	r25
     ce8:	87 95       	ror	r24
     cea:	9e 83       	std	Y+6, r25	; 0x06
     cec:	8d 83       	std	Y+5, r24	; 0x05
		f = dy-i;
     cee:	2d 85       	ldd	r18, Y+13	; 0x0d
     cf0:	3e 85       	ldd	r19, Y+14	; 0x0e
     cf2:	8d 81       	ldd	r24, Y+5	; 0x05
     cf4:	9e 81       	ldd	r25, Y+6	; 0x06
     cf6:	a9 01       	movw	r20, r18
     cf8:	48 1b       	sub	r20, r24
     cfa:	59 0b       	sbc	r21, r25
     cfc:	ca 01       	movw	r24, r20
     cfe:	98 87       	std	Y+8, r25	; 0x08
     d00:	8f 83       	std	Y+7, r24	; 0x07
     d02:	25 c0       	rjmp	.+74     	; 0xd4e <s65_line+0x1ca>
		while (x1!=x2) {
			if (f >= 0) {
     d04:	8f 81       	ldd	r24, Y+7	; 0x07
     d06:	98 85       	ldd	r25, Y+8	; 0x08
     d08:	99 23       	and	r25, r25
     d0a:	74 f0       	brlt	.+28     	; 0xd28 <s65_line+0x1a4>
				y1 += sy; //Y1 = Y1 + Stepy
     d0c:	99 85       	ldd	r25, Y+9	; 0x09
     d0e:	8a 89       	ldd	r24, Y+18	; 0x12
     d10:	89 0f       	add	r24, r25
     d12:	8a 8b       	std	Y+18, r24	; 0x12
				f -= dx; //Fraction = Fraction - Dx
     d14:	2f 81       	ldd	r18, Y+7	; 0x07
     d16:	38 85       	ldd	r19, Y+8	; 0x08
     d18:	8f 85       	ldd	r24, Y+15	; 0x0f
     d1a:	98 89       	ldd	r25, Y+16	; 0x10
     d1c:	a9 01       	movw	r20, r18
     d1e:	48 1b       	sub	r20, r24
     d20:	59 0b       	sbc	r21, r25
     d22:	ca 01       	movw	r24, r20
     d24:	98 87       	std	Y+8, r25	; 0x08
     d26:	8f 83       	std	Y+7, r24	; 0x07
			}
         x1 += sx;
     d28:	9b 85       	ldd	r25, Y+11	; 0x0b
     d2a:	89 89       	ldd	r24, Y+17	; 0x11
     d2c:	89 0f       	add	r24, r25
     d2e:	89 8b       	std	Y+17, r24	; 0x11
			f += dy;
     d30:	2f 81       	ldd	r18, Y+7	; 0x07
     d32:	38 85       	ldd	r19, Y+8	; 0x08
     d34:	8d 85       	ldd	r24, Y+13	; 0x0d
     d36:	9e 85       	ldd	r25, Y+14	; 0x0e
     d38:	82 0f       	add	r24, r18
     d3a:	93 1f       	adc	r25, r19
     d3c:	98 87       	std	Y+8, r25	; 0x08
     d3e:	8f 83       	std	Y+7, r24	; 0x07
			s65_pix(x1,y1,color);
     d40:	2d 89       	ldd	r18, Y+21	; 0x15
     d42:	3e 89       	ldd	r19, Y+22	; 0x16
     d44:	89 89       	ldd	r24, Y+17	; 0x11
     d46:	6a 89       	ldd	r22, Y+18	; 0x12
     d48:	a9 01       	movw	r20, r18
     d4a:	0e 94 2f 05 	call	0xa5e	; 0xa5e <s65_pix>

	if (dx > dy) {
		i = dx;
		i >>= 1;
		f = dy-i;
		while (x1!=x2) {
     d4e:	99 89       	ldd	r25, Y+17	; 0x11
     d50:	8b 89       	ldd	r24, Y+19	; 0x13
     d52:	98 17       	cp	r25, r24
     d54:	b9 f6       	brne	.-82     	; 0xd04 <s65_line+0x180>
     d56:	3e c0       	rjmp	.+124    	; 0xdd4 <s65_line+0x250>
         x1 += sx;
			f += dy;
			s65_pix(x1,y1,color);
		}
	} else {
      i = dy;
     d58:	8d 85       	ldd	r24, Y+13	; 0x0d
     d5a:	9e 85       	ldd	r25, Y+14	; 0x0e
     d5c:	9e 83       	std	Y+6, r25	; 0x06
     d5e:	8d 83       	std	Y+5, r24	; 0x05
		i >>= 1;
     d60:	8d 81       	ldd	r24, Y+5	; 0x05
     d62:	9e 81       	ldd	r25, Y+6	; 0x06
     d64:	96 95       	lsr	r25
     d66:	87 95       	ror	r24
     d68:	9e 83       	std	Y+6, r25	; 0x06
     d6a:	8d 83       	std	Y+5, r24	; 0x05
		f = dx-i;
     d6c:	2f 85       	ldd	r18, Y+15	; 0x0f
     d6e:	38 89       	ldd	r19, Y+16	; 0x10
     d70:	8d 81       	ldd	r24, Y+5	; 0x05
     d72:	9e 81       	ldd	r25, Y+6	; 0x06
     d74:	a9 01       	movw	r20, r18
     d76:	48 1b       	sub	r20, r24
     d78:	59 0b       	sbc	r21, r25
     d7a:	ca 01       	movw	r24, r20
     d7c:	98 87       	std	Y+8, r25	; 0x08
     d7e:	8f 83       	std	Y+7, r24	; 0x07
     d80:	25 c0       	rjmp	.+74     	; 0xdcc <s65_line+0x248>
		while (y1!=y2) {
			if (f >= 0) {
     d82:	8f 81       	ldd	r24, Y+7	; 0x07
     d84:	98 85       	ldd	r25, Y+8	; 0x08
     d86:	99 23       	and	r25, r25
     d88:	74 f0       	brlt	.+28     	; 0xda6 <s65_line+0x222>
				x1 += sx;
     d8a:	9b 85       	ldd	r25, Y+11	; 0x0b
     d8c:	89 89       	ldd	r24, Y+17	; 0x11
     d8e:	89 0f       	add	r24, r25
     d90:	89 8b       	std	Y+17, r24	; 0x11
				f -= dy; //Fraction = Fraction - Dy
     d92:	2f 81       	ldd	r18, Y+7	; 0x07
     d94:	38 85       	ldd	r19, Y+8	; 0x08
     d96:	8d 85       	ldd	r24, Y+13	; 0x0d
     d98:	9e 85       	ldd	r25, Y+14	; 0x0e
     d9a:	a9 01       	movw	r20, r18
     d9c:	48 1b       	sub	r20, r24
     d9e:	59 0b       	sbc	r21, r25
     da0:	ca 01       	movw	r24, r20
     da2:	98 87       	std	Y+8, r25	; 0x08
     da4:	8f 83       	std	Y+7, r24	; 0x07
			}
			y1 += sy;
     da6:	99 85       	ldd	r25, Y+9	; 0x09
     da8:	8a 89       	ldd	r24, Y+18	; 0x12
     daa:	89 0f       	add	r24, r25
     dac:	8a 8b       	std	Y+18, r24	; 0x12
			f += dx;
     dae:	2f 81       	ldd	r18, Y+7	; 0x07
     db0:	38 85       	ldd	r19, Y+8	; 0x08
     db2:	8f 85       	ldd	r24, Y+15	; 0x0f
     db4:	98 89       	ldd	r25, Y+16	; 0x10
     db6:	82 0f       	add	r24, r18
     db8:	93 1f       	adc	r25, r19
     dba:	98 87       	std	Y+8, r25	; 0x08
     dbc:	8f 83       	std	Y+7, r24	; 0x07
			s65_pix(x1,y1,color);
     dbe:	2d 89       	ldd	r18, Y+21	; 0x15
     dc0:	3e 89       	ldd	r19, Y+22	; 0x16
     dc2:	89 89       	ldd	r24, Y+17	; 0x11
     dc4:	6a 89       	ldd	r22, Y+18	; 0x12
     dc6:	a9 01       	movw	r20, r18
     dc8:	0e 94 2f 05 	call	0xa5e	; 0xa5e <s65_pix>
		}
	} else {
      i = dy;
		i >>= 1;
		f = dx-i;
		while (y1!=y2) {
     dcc:	9a 89       	ldd	r25, Y+18	; 0x12
     dce:	8c 89       	ldd	r24, Y+20	; 0x14
     dd0:	98 17       	cp	r25, r24
     dd2:	b9 f6       	brne	.-82     	; 0xd82 <s65_line+0x1fe>
			y1 += sy;
			f += dx;
			s65_pix(x1,y1,color);
		}
	}
}
     dd4:	66 96       	adiw	r28, 0x16	; 22
     dd6:	0f b6       	in	r0, 0x3f	; 63
     dd8:	f8 94       	cli
     dda:	de bf       	out	0x3e, r29	; 62
     ddc:	0f be       	out	0x3f, r0	; 63
     dde:	cd bf       	out	0x3d, r28	; 61
     de0:	cf 91       	pop	r28
     de2:	df 91       	pop	r29
     de4:	1f 91       	pop	r17
     de6:	0f 91       	pop	r16
     de8:	08 95       	ret

00000dea <s65_rect>:
#endif

#if S65_RECT == 1
void s65_rect(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, uint16_t color) {
     dea:	0f 93       	push	r16
     dec:	1f 93       	push	r17
     dee:	df 93       	push	r29
     df0:	cf 93       	push	r28
     df2:	cd b7       	in	r28, 0x3d	; 61
     df4:	de b7       	in	r29, 0x3e	; 62
     df6:	28 97       	sbiw	r28, 0x08	; 8
     df8:	0f b6       	in	r0, 0x3f	; 63
     dfa:	f8 94       	cli
     dfc:	de bf       	out	0x3e, r29	; 62
     dfe:	0f be       	out	0x3f, r0	; 63
     e00:	cd bf       	out	0x3d, r28	; 61
     e02:	8b 83       	std	Y+3, r24	; 0x03
     e04:	6c 83       	std	Y+4, r22	; 0x04
     e06:	4d 83       	std	Y+5, r20	; 0x05
     e08:	2e 83       	std	Y+6, r18	; 0x06
     e0a:	18 87       	std	Y+8, r17	; 0x08
     e0c:	0f 83       	std	Y+7, r16	; 0x07
	uint8_t w,h;
	if (x1 >= S65_WIDTH) x1 = S65_WIDTH-1;
     e0e:	8b 81       	ldd	r24, Y+3	; 0x03
     e10:	84 38       	cpi	r24, 0x84	; 132
     e12:	10 f0       	brcs	.+4      	; 0xe18 <s65_rect+0x2e>
     e14:	83 e8       	ldi	r24, 0x83	; 131
     e16:	8b 83       	std	Y+3, r24	; 0x03
	if (y1 >= S65_HEIGHT) y1 = S65_HEIGHT-1;
     e18:	8c 81       	ldd	r24, Y+4	; 0x04
     e1a:	80 3b       	cpi	r24, 0xB0	; 176
     e1c:	10 f0       	brcs	.+4      	; 0xe22 <s65_rect+0x38>
     e1e:	8f ea       	ldi	r24, 0xAF	; 175
     e20:	8c 83       	std	Y+4, r24	; 0x04
	if (x2 >= S65_WIDTH) x2 = S65_WIDTH-1;
     e22:	8d 81       	ldd	r24, Y+5	; 0x05
     e24:	84 38       	cpi	r24, 0x84	; 132
     e26:	10 f0       	brcs	.+4      	; 0xe2c <s65_rect+0x42>
     e28:	83 e8       	ldi	r24, 0x83	; 131
     e2a:	8d 83       	std	Y+5, r24	; 0x05
	if (y2 >= S65_HEIGHT) y2 = S65_HEIGHT-1;
     e2c:	8e 81       	ldd	r24, Y+6	; 0x06
     e2e:	80 3b       	cpi	r24, 0xB0	; 176
     e30:	10 f0       	brcs	.+4      	; 0xe36 <s65_rect+0x4c>
     e32:	8f ea       	ldi	r24, 0xAF	; 175
     e34:	8e 83       	std	Y+6, r24	; 0x06
	if (x1 > x2) { w = x1; x1 = x2; x2 = w; }
     e36:	9b 81       	ldd	r25, Y+3	; 0x03
     e38:	8d 81       	ldd	r24, Y+5	; 0x05
     e3a:	89 17       	cp	r24, r25
     e3c:	30 f4       	brcc	.+12     	; 0xe4a <s65_rect+0x60>
     e3e:	8b 81       	ldd	r24, Y+3	; 0x03
     e40:	8a 83       	std	Y+2, r24	; 0x02
     e42:	8d 81       	ldd	r24, Y+5	; 0x05
     e44:	8b 83       	std	Y+3, r24	; 0x03
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	8d 83       	std	Y+5, r24	; 0x05
	if (y1 > y2) { h = y1; y1 = y2; y2 = h; }
     e4a:	9c 81       	ldd	r25, Y+4	; 0x04
     e4c:	8e 81       	ldd	r24, Y+6	; 0x06
     e4e:	89 17       	cp	r24, r25
     e50:	30 f4       	brcc	.+12     	; 0xe5e <s65_rect+0x74>
     e52:	8c 81       	ldd	r24, Y+4	; 0x04
     e54:	89 83       	std	Y+1, r24	; 0x01
     e56:	8e 81       	ldd	r24, Y+6	; 0x06
     e58:	8c 83       	std	Y+4, r24	; 0x04
     e5a:	89 81       	ldd	r24, Y+1	; 0x01
     e5c:	8e 83       	std	Y+6, r24	; 0x06
	w = x2-x1;
     e5e:	9d 81       	ldd	r25, Y+5	; 0x05
     e60:	8b 81       	ldd	r24, Y+3	; 0x03
     e62:	29 2f       	mov	r18, r25
     e64:	28 1b       	sub	r18, r24
     e66:	82 2f       	mov	r24, r18
     e68:	8a 83       	std	Y+2, r24	; 0x02
	h = y2-y1;
     e6a:	9e 81       	ldd	r25, Y+6	; 0x06
     e6c:	8c 81       	ldd	r24, Y+4	; 0x04
     e6e:	29 2f       	mov	r18, r25
     e70:	28 1b       	sub	r18, r24
     e72:	82 2f       	mov	r24, r18
     e74:	89 83       	std	Y+1, r24	; 0x01
	if (w>= S65_WIDTH) w = S65_WIDTH-1;
     e76:	8a 81       	ldd	r24, Y+2	; 0x02
     e78:	84 38       	cpi	r24, 0x84	; 132
     e7a:	10 f0       	brcs	.+4      	; 0xe80 <s65_rect+0x96>
     e7c:	83 e8       	ldi	r24, 0x83	; 131
     e7e:	8a 83       	std	Y+2, r24	; 0x02
	if (h>= S65_HEIGHT) h = S65_HEIGHT-1;
     e80:	89 81       	ldd	r24, Y+1	; 0x01
     e82:	80 3b       	cpi	r24, 0xB0	; 176
     e84:	10 f0       	brcs	.+4      	; 0xe8a <s65_rect+0xa0>
     e86:	8f ea       	ldi	r24, 0xAF	; 175
     e88:	89 83       	std	Y+1, r24	; 0x01
	
	s65_frame(x1,y1,x2,y2);
     e8a:	8b 81       	ldd	r24, Y+3	; 0x03
     e8c:	6c 81       	ldd	r22, Y+4	; 0x04
     e8e:	4d 81       	ldd	r20, Y+5	; 0x05
     e90:	2e 81       	ldd	r18, Y+6	; 0x06
     e92:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <s65_frame>
	
	s65_lineH(x1,y1,w,color);
     e96:	2f 81       	ldd	r18, Y+7	; 0x07
     e98:	38 85       	ldd	r19, Y+8	; 0x08
     e9a:	8b 81       	ldd	r24, Y+3	; 0x03
     e9c:	6c 81       	ldd	r22, Y+4	; 0x04
     e9e:	4a 81       	ldd	r20, Y+2	; 0x02
     ea0:	0e 94 4d 05 	call	0xa9a	; 0xa9a <s65_lineH>
	s65_lineH(x1,y2,w,color);
     ea4:	2f 81       	ldd	r18, Y+7	; 0x07
     ea6:	38 85       	ldd	r19, Y+8	; 0x08
     ea8:	8b 81       	ldd	r24, Y+3	; 0x03
     eaa:	6e 81       	ldd	r22, Y+6	; 0x06
     eac:	4a 81       	ldd	r20, Y+2	; 0x02
     eae:	0e 94 4d 05 	call	0xa9a	; 0xa9a <s65_lineH>
	s65_lineV(x1,y1+1,h-2,color);
     eb2:	8c 81       	ldd	r24, Y+4	; 0x04
     eb4:	98 2f       	mov	r25, r24
     eb6:	9f 5f       	subi	r25, 0xFF	; 255
     eb8:	89 81       	ldd	r24, Y+1	; 0x01
     eba:	48 2f       	mov	r20, r24
     ebc:	42 50       	subi	r20, 0x02	; 2
     ebe:	2f 81       	ldd	r18, Y+7	; 0x07
     ec0:	38 85       	ldd	r19, Y+8	; 0x08
     ec2:	8b 81       	ldd	r24, Y+3	; 0x03
     ec4:	69 2f       	mov	r22, r25
     ec6:	0e 94 83 05 	call	0xb06	; 0xb06 <s65_lineV>
	s65_lineV(x2,y1+1,h-2,color);
     eca:	8c 81       	ldd	r24, Y+4	; 0x04
     ecc:	98 2f       	mov	r25, r24
     ece:	9f 5f       	subi	r25, 0xFF	; 255
     ed0:	89 81       	ldd	r24, Y+1	; 0x01
     ed2:	48 2f       	mov	r20, r24
     ed4:	42 50       	subi	r20, 0x02	; 2
     ed6:	2f 81       	ldd	r18, Y+7	; 0x07
     ed8:	38 85       	ldd	r19, Y+8	; 0x08
     eda:	8d 81       	ldd	r24, Y+5	; 0x05
     edc:	69 2f       	mov	r22, r25
     ede:	0e 94 83 05 	call	0xb06	; 0xb06 <s65_lineV>

}
     ee2:	28 96       	adiw	r28, 0x08	; 8
     ee4:	0f b6       	in	r0, 0x3f	; 63
     ee6:	f8 94       	cli
     ee8:	de bf       	out	0x3e, r29	; 62
     eea:	0f be       	out	0x3f, r0	; 63
     eec:	cd bf       	out	0x3d, r28	; 61
     eee:	cf 91       	pop	r28
     ef0:	df 91       	pop	r29
     ef2:	1f 91       	pop	r17
     ef4:	0f 91       	pop	r16
     ef6:	08 95       	ret

00000ef8 <s65_rectFill>:
#endif

#if S65_RECT_FILL == 1
void s65_rectFill(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, uint16_t color) {
     ef8:	0f 93       	push	r16
     efa:	1f 93       	push	r17
     efc:	df 93       	push	r29
     efe:	cf 93       	push	r28
     f00:	cd b7       	in	r28, 0x3d	; 61
     f02:	de b7       	in	r29, 0x3e	; 62
     f04:	27 97       	sbiw	r28, 0x07	; 7
     f06:	0f b6       	in	r0, 0x3f	; 63
     f08:	f8 94       	cli
     f0a:	de bf       	out	0x3e, r29	; 62
     f0c:	0f be       	out	0x3f, r0	; 63
     f0e:	cd bf       	out	0x3d, r28	; 61
     f10:	8a 83       	std	Y+2, r24	; 0x02
     f12:	6b 83       	std	Y+3, r22	; 0x03
     f14:	4c 83       	std	Y+4, r20	; 0x04
     f16:	2d 83       	std	Y+5, r18	; 0x05
     f18:	1f 83       	std	Y+7, r17	; 0x07
     f1a:	0e 83       	std	Y+6, r16	; 0x06
	uint8_t y;
	if (x1 >= S65_WIDTH) x1 = S65_WIDTH-1;
     f1c:	8a 81       	ldd	r24, Y+2	; 0x02
     f1e:	84 38       	cpi	r24, 0x84	; 132
     f20:	10 f0       	brcs	.+4      	; 0xf26 <s65_rectFill+0x2e>
     f22:	83 e8       	ldi	r24, 0x83	; 131
     f24:	8a 83       	std	Y+2, r24	; 0x02
	if (y1 >= S65_HEIGHT) y1 = S65_HEIGHT-1;
     f26:	8b 81       	ldd	r24, Y+3	; 0x03
     f28:	80 3b       	cpi	r24, 0xB0	; 176
     f2a:	10 f0       	brcs	.+4      	; 0xf30 <s65_rectFill+0x38>
     f2c:	8f ea       	ldi	r24, 0xAF	; 175
     f2e:	8b 83       	std	Y+3, r24	; 0x03
	if (x2 >= S65_WIDTH) x2 = S65_WIDTH-1;
     f30:	8c 81       	ldd	r24, Y+4	; 0x04
     f32:	84 38       	cpi	r24, 0x84	; 132
     f34:	10 f0       	brcs	.+4      	; 0xf3a <s65_rectFill+0x42>
     f36:	83 e8       	ldi	r24, 0x83	; 131
     f38:	8c 83       	std	Y+4, r24	; 0x04
	if (y2 >= S65_HEIGHT) y2 = S65_HEIGHT-1;
     f3a:	8d 81       	ldd	r24, Y+5	; 0x05
     f3c:	80 3b       	cpi	r24, 0xB0	; 176
     f3e:	10 f0       	brcs	.+4      	; 0xf44 <s65_rectFill+0x4c>
     f40:	8f ea       	ldi	r24, 0xAF	; 175
     f42:	8d 83       	std	Y+5, r24	; 0x05
	if (x1 > x2) { y = x1; x1 = x2; x2 = y; }
     f44:	9a 81       	ldd	r25, Y+2	; 0x02
     f46:	8c 81       	ldd	r24, Y+4	; 0x04
     f48:	89 17       	cp	r24, r25
     f4a:	30 f4       	brcc	.+12     	; 0xf58 <s65_rectFill+0x60>
     f4c:	8a 81       	ldd	r24, Y+2	; 0x02
     f4e:	89 83       	std	Y+1, r24	; 0x01
     f50:	8c 81       	ldd	r24, Y+4	; 0x04
     f52:	8a 83       	std	Y+2, r24	; 0x02
     f54:	89 81       	ldd	r24, Y+1	; 0x01
     f56:	8c 83       	std	Y+4, r24	; 0x04
	if (y1 > y2) { y = y1; y1 = y2; y2 = y; }
     f58:	9b 81       	ldd	r25, Y+3	; 0x03
     f5a:	8d 81       	ldd	r24, Y+5	; 0x05
     f5c:	89 17       	cp	r24, r25
     f5e:	30 f4       	brcc	.+12     	; 0xf6c <s65_rectFill+0x74>
     f60:	8b 81       	ldd	r24, Y+3	; 0x03
     f62:	89 83       	std	Y+1, r24	; 0x01
     f64:	8d 81       	ldd	r24, Y+5	; 0x05
     f66:	8b 83       	std	Y+3, r24	; 0x03
     f68:	89 81       	ldd	r24, Y+1	; 0x01
     f6a:	8d 83       	std	Y+5, r24	; 0x05
	
	s65_frame(x1,y1,x2,y2);
     f6c:	8a 81       	ldd	r24, Y+2	; 0x02
     f6e:	6b 81       	ldd	r22, Y+3	; 0x03
     f70:	4c 81       	ldd	r20, Y+4	; 0x04
     f72:	2d 81       	ldd	r18, Y+5	; 0x05
     f74:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <s65_frame>
     f78:	0d c0       	rjmp	.+26     	; 0xf94 <s65_rectFill+0x9c>
	//	for (y=y1;y<=y2;y++) {
	//		s65_pix(x1,y,color);
	//	}
	//}
	for (;x1<=x2;x1++) {
		s65_lineV(x1,y1,y2-y1,color);
     f7a:	9d 81       	ldd	r25, Y+5	; 0x05
     f7c:	8b 81       	ldd	r24, Y+3	; 0x03
     f7e:	98 1b       	sub	r25, r24
     f80:	2e 81       	ldd	r18, Y+6	; 0x06
     f82:	3f 81       	ldd	r19, Y+7	; 0x07
     f84:	8a 81       	ldd	r24, Y+2	; 0x02
     f86:	6b 81       	ldd	r22, Y+3	; 0x03
     f88:	49 2f       	mov	r20, r25
     f8a:	0e 94 83 05 	call	0xb06	; 0xb06 <s65_lineV>
	//for (;x1<=x2;x1++) {
	//	for (y=y1;y<=y2;y++) {
	//		s65_pix(x1,y,color);
	//	}
	//}
	for (;x1<=x2;x1++) {
     f8e:	8a 81       	ldd	r24, Y+2	; 0x02
     f90:	8f 5f       	subi	r24, 0xFF	; 255
     f92:	8a 83       	std	Y+2, r24	; 0x02
     f94:	9a 81       	ldd	r25, Y+2	; 0x02
     f96:	8c 81       	ldd	r24, Y+4	; 0x04
     f98:	89 17       	cp	r24, r25
     f9a:	78 f7       	brcc	.-34     	; 0xf7a <s65_rectFill+0x82>
		s65_lineV(x1,y1,y2-y1,color);
	}
}
     f9c:	27 96       	adiw	r28, 0x07	; 7
     f9e:	0f b6       	in	r0, 0x3f	; 63
     fa0:	f8 94       	cli
     fa2:	de bf       	out	0x3e, r29	; 62
     fa4:	0f be       	out	0x3f, r0	; 63
     fa6:	cd bf       	out	0x3d, r28	; 61
     fa8:	cf 91       	pop	r28
     faa:	df 91       	pop	r29
     fac:	1f 91       	pop	r17
     fae:	0f 91       	pop	r16
     fb0:	08 95       	ret

00000fb2 <s65_char>:
#endif

#if S65_CHAR == 1
uint8_t s65_char(uint8_t x, uint8_t y, char znak, uint16_t bg, uint16_t fg) {
     fb2:	0f 93       	push	r16
     fb4:	1f 93       	push	r17
     fb6:	df 93       	push	r29
     fb8:	cf 93       	push	r28
     fba:	cd b7       	in	r28, 0x3d	; 61
     fbc:	de b7       	in	r29, 0x3e	; 62
     fbe:	2f 97       	sbiw	r28, 0x0f	; 15
     fc0:	0f b6       	in	r0, 0x3f	; 63
     fc2:	f8 94       	cli
     fc4:	de bf       	out	0x3e, r29	; 62
     fc6:	0f be       	out	0x3f, r0	; 63
     fc8:	cd bf       	out	0x3d, r28	; 61
     fca:	89 87       	std	Y+9, r24	; 0x09
     fcc:	6a 87       	std	Y+10, r22	; 0x0a
     fce:	4b 87       	std	Y+11, r20	; 0x0b
     fd0:	3d 87       	std	Y+13, r19	; 0x0d
     fd2:	2c 87       	std	Y+12, r18	; 0x0c
     fd4:	1f 87       	std	Y+15, r17	; 0x0f
     fd6:	0e 87       	std	Y+14, r16	; 0x0e
	if ((znak > (GPH_CHAR_COUNT+GPH_CHAR_START)) || (znak < GPH_CHAR_START)) znak = GPH_CHAR_START;
     fd8:	8b 85       	ldd	r24, Y+11	; 0x0b
     fda:	88 23       	and	r24, r24
     fdc:	1c f0       	brlt	.+6      	; 0xfe4 <s65_char+0x32>
     fde:	8b 85       	ldd	r24, Y+11	; 0x0b
     fe0:	80 32       	cpi	r24, 0x20	; 32
     fe2:	10 f4       	brcc	.+4      	; 0xfe8 <s65_char+0x36>
     fe4:	80 e2       	ldi	r24, 0x20	; 32
     fe6:	8b 87       	std	Y+11, r24	; 0x0b
	// calculate char location in array
	uint16_t t=(znak-GPH_CHAR_START)*GPH_CHAR_WIDTH;
     fe8:	8b 85       	ldd	r24, Y+11	; 0x0b
     fea:	28 2f       	mov	r18, r24
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	c9 01       	movw	r24, r18
     ff0:	88 0f       	add	r24, r24
     ff2:	99 1f       	adc	r25, r25
     ff4:	88 0f       	add	r24, r24
     ff6:	99 1f       	adc	r25, r25
     ff8:	82 0f       	add	r24, r18
     ffa:	93 1f       	adc	r25, r19
     ffc:	80 5a       	subi	r24, 0xA0	; 160
     ffe:	90 40       	sbci	r25, 0x00	; 0
    1000:	98 87       	std	Y+8, r25	; 0x08
    1002:	8f 83       	std	Y+7, r24	; 0x07
	#endif
	

	// /*
	//	for (uint8_t i=(GPH_CHAR_WIDTH+x);i>x;i--) { // do not flip character
		for (uint8_t i=x;i<(GPH_CHAR_WIDTH+x);i++) { // flip vertically character
    1004:	89 85       	ldd	r24, Y+9	; 0x09
    1006:	8d 83       	std	Y+5, r24	; 0x05
    1008:	39 c0       	rjmp	.+114    	; 0x107c <s65_char+0xca>
		// draw x bytes of char - char byte data orientation vertically
		// get column byte of char	
		#if GPH_CHAR_HEIGHT <= 8
			b = pgm_read_byte(&GPH_FONT_NAME[t++]);
    100a:	8f 81       	ldd	r24, Y+7	; 0x07
    100c:	98 85       	ldd	r25, Y+8	; 0x08
    100e:	8d 59       	subi	r24, 0x9D	; 157
    1010:	9e 4f       	sbci	r25, 0xFE	; 254
    1012:	9c 83       	std	Y+4, r25	; 0x04
    1014:	8b 83       	std	Y+3, r24	; 0x03
    1016:	8f 81       	ldd	r24, Y+7	; 0x07
    1018:	98 85       	ldd	r25, Y+8	; 0x08
    101a:	01 96       	adiw	r24, 0x01	; 1
    101c:	98 87       	std	Y+8, r25	; 0x08
    101e:	8f 83       	std	Y+7, r24	; 0x07
    1020:	eb 81       	ldd	r30, Y+3	; 0x03
    1022:	fc 81       	ldd	r31, Y+4	; 0x04
    1024:	84 91       	lpm	r24, Z+
    1026:	8a 83       	std	Y+2, r24	; 0x02
    1028:	8a 81       	ldd	r24, Y+2	; 0x02
    102a:	8e 83       	std	Y+6, r24	; 0x06
		#elif GPH_CHAR_HEIGHT > 16
			b = pgm_read_dword(&GPH_FONT_NAME[t++]);
		#endif
		// window to draw
		
		for (uint8_t j=y;j<(y+GPH_CHAR_HEIGHT);j++) {
    102c:	8a 85       	ldd	r24, Y+10	; 0x0a
    102e:	89 83       	std	Y+1, r24	; 0x01
    1030:	18 c0       	rjmp	.+48     	; 0x1062 <s65_char+0xb0>
			#if (GPH_FONT_COLUMN_UP_DOWN == 1)
				#if GPH_CHAR_HEIGHT <= 8
					if (b & 0x80) { // up to 8bit font height
    1032:	8e 81       	ldd	r24, Y+6	; 0x06
    1034:	88 23       	and	r24, r24
    1036:	44 f4       	brge	.+16     	; 0x1048 <s65_char+0x96>
				#endif
			#endif
				#if S65_ROTATE_90==1
					s65_pix(j,i,fg);
				#else
					s65_pix(i,j,fg);
    1038:	2e 85       	ldd	r18, Y+14	; 0x0e
    103a:	3f 85       	ldd	r19, Y+15	; 0x0f
    103c:	8d 81       	ldd	r24, Y+5	; 0x05
    103e:	69 81       	ldd	r22, Y+1	; 0x01
    1040:	a9 01       	movw	r20, r18
    1042:	0e 94 2f 05 	call	0xa5e	; 0xa5e <s65_pix>
    1046:	07 c0       	rjmp	.+14     	; 0x1056 <s65_char+0xa4>
				#endif
			} else { // draw background (if needed...)??
				#if S65_ROTATE_90==1
					s65_pix(j,i,bg);
				#else
					s65_pix(i,j,bg);
    1048:	2c 85       	ldd	r18, Y+12	; 0x0c
    104a:	3d 85       	ldd	r19, Y+13	; 0x0d
    104c:	8d 81       	ldd	r24, Y+5	; 0x05
    104e:	69 81       	ldd	r22, Y+1	; 0x01
    1050:	a9 01       	movw	r20, r18
    1052:	0e 94 2f 05 	call	0xa5e	; 0xa5e <s65_pix>
				#endif
			}
			#if (GPH_FONT_COLUMN_UP_DOWN == 1)
				b <<= 1;
    1056:	8e 81       	ldd	r24, Y+6	; 0x06
    1058:	88 0f       	add	r24, r24
    105a:	8e 83       	std	Y+6, r24	; 0x06
		#elif GPH_CHAR_HEIGHT > 16
			b = pgm_read_dword(&GPH_FONT_NAME[t++]);
		#endif
		// window to draw
		
		for (uint8_t j=y;j<(y+GPH_CHAR_HEIGHT);j++) {
    105c:	89 81       	ldd	r24, Y+1	; 0x01
    105e:	8f 5f       	subi	r24, 0xFF	; 255
    1060:	89 83       	std	Y+1, r24	; 0x01
    1062:	89 81       	ldd	r24, Y+1	; 0x01
    1064:	28 2f       	mov	r18, r24
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	8a 85       	ldd	r24, Y+10	; 0x0a
    106a:	88 2f       	mov	r24, r24
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	08 96       	adiw	r24, 0x08	; 8
    1070:	28 17       	cp	r18, r24
    1072:	39 07       	cpc	r19, r25
    1074:	f4 f2       	brlt	.-68     	; 0x1032 <s65_char+0x80>
	#endif
	

	// /*
	//	for (uint8_t i=(GPH_CHAR_WIDTH+x);i>x;i--) { // do not flip character
		for (uint8_t i=x;i<(GPH_CHAR_WIDTH+x);i++) { // flip vertically character
    1076:	8d 81       	ldd	r24, Y+5	; 0x05
    1078:	8f 5f       	subi	r24, 0xFF	; 255
    107a:	8d 83       	std	Y+5, r24	; 0x05
    107c:	8d 81       	ldd	r24, Y+5	; 0x05
    107e:	28 2f       	mov	r18, r24
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	89 85       	ldd	r24, Y+9	; 0x09
    1084:	88 2f       	mov	r24, r24
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	05 96       	adiw	r24, 0x05	; 5
    108a:	28 17       	cp	r18, r24
    108c:	39 07       	cpc	r19, r25
    108e:	0c f4       	brge	.+2      	; 0x1092 <s65_char+0xe0>
    1090:	bc cf       	rjmp	.-136    	; 0x100a <s65_char+0x58>
				b >>= 1;
			#endif
		}
	}
	// */
	return GPH_CHAR_WIDTH;
    1092:	85 e0       	ldi	r24, 0x05	; 5
}
    1094:	2f 96       	adiw	r28, 0x0f	; 15
    1096:	0f b6       	in	r0, 0x3f	; 63
    1098:	f8 94       	cli
    109a:	de bf       	out	0x3e, r29	; 62
    109c:	0f be       	out	0x3f, r0	; 63
    109e:	cd bf       	out	0x3d, r28	; 61
    10a0:	cf 91       	pop	r28
    10a2:	df 91       	pop	r29
    10a4:	1f 91       	pop	r17
    10a6:	0f 91       	pop	r16
    10a8:	08 95       	ret

000010aa <s65_strP>:
	return x;
}	
#endif

#if S65_STR_P == 1
uint8_t s65_strP(uint8_t x, uint8_t y, char* str, uint16_t bg, uint16_t fg) {
    10aa:	0f 93       	push	r16
    10ac:	1f 93       	push	r17
    10ae:	df 93       	push	r29
    10b0:	cf 93       	push	r28
    10b2:	cd b7       	in	r28, 0x3d	; 61
    10b4:	de b7       	in	r29, 0x3e	; 62
    10b6:	2c 97       	sbiw	r28, 0x0c	; 12
    10b8:	0f b6       	in	r0, 0x3f	; 63
    10ba:	f8 94       	cli
    10bc:	de bf       	out	0x3e, r29	; 62
    10be:	0f be       	out	0x3f, r0	; 63
    10c0:	cd bf       	out	0x3d, r28	; 61
    10c2:	8d 83       	std	Y+5, r24	; 0x05
    10c4:	6e 83       	std	Y+6, r22	; 0x06
    10c6:	58 87       	std	Y+8, r21	; 0x08
    10c8:	4f 83       	std	Y+7, r20	; 0x07
    10ca:	3a 87       	std	Y+10, r19	; 0x0a
    10cc:	29 87       	std	Y+9, r18	; 0x09
    10ce:	1c 87       	std	Y+12, r17	; 0x0c
    10d0:	0b 87       	std	Y+11, r16	; 0x0b
    10d2:	0d c0       	rjmp	.+26     	; 0x10ee <s65_strP+0x44>
	
	//#if S65_ROTATE_90 != 1
		char znak;
		while (0 != (znak = pgm_read_byte(str++))) {
			s65_char(x, y, znak, bg, fg);
    10d4:	29 85       	ldd	r18, Y+9	; 0x09
    10d6:	3a 85       	ldd	r19, Y+10	; 0x0a
    10d8:	eb 85       	ldd	r30, Y+11	; 0x0b
    10da:	fc 85       	ldd	r31, Y+12	; 0x0c
    10dc:	8d 81       	ldd	r24, Y+5	; 0x05
    10de:	6e 81       	ldd	r22, Y+6	; 0x06
    10e0:	4c 81       	ldd	r20, Y+4	; 0x04
    10e2:	8f 01       	movw	r16, r30
    10e4:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <s65_char>
			x += GPH_CHAR_WIDTH;
    10e8:	8d 81       	ldd	r24, Y+5	; 0x05
    10ea:	8b 5f       	subi	r24, 0xFB	; 251
    10ec:	8d 83       	std	Y+5, r24	; 0x05
#if S65_STR_P == 1
uint8_t s65_strP(uint8_t x, uint8_t y, char* str, uint16_t bg, uint16_t fg) {
	
	//#if S65_ROTATE_90 != 1
		char znak;
		while (0 != (znak = pgm_read_byte(str++))) {
    10ee:	8f 81       	ldd	r24, Y+7	; 0x07
    10f0:	98 85       	ldd	r25, Y+8	; 0x08
    10f2:	9b 83       	std	Y+3, r25	; 0x03
    10f4:	8a 83       	std	Y+2, r24	; 0x02
    10f6:	8f 81       	ldd	r24, Y+7	; 0x07
    10f8:	98 85       	ldd	r25, Y+8	; 0x08
    10fa:	01 96       	adiw	r24, 0x01	; 1
    10fc:	98 87       	std	Y+8, r25	; 0x08
    10fe:	8f 83       	std	Y+7, r24	; 0x07
    1100:	ea 81       	ldd	r30, Y+2	; 0x02
    1102:	fb 81       	ldd	r31, Y+3	; 0x03
    1104:	84 91       	lpm	r24, Z+
    1106:	89 83       	std	Y+1, r24	; 0x01
    1108:	89 81       	ldd	r24, Y+1	; 0x01
    110a:	8c 83       	std	Y+4, r24	; 0x04
    110c:	8c 81       	ldd	r24, Y+4	; 0x04
    110e:	88 23       	and	r24, r24
    1110:	09 f7       	brne	.-62     	; 0x10d4 <s65_strP+0x2a>
			s65_char(x, y, znak, bg, fg);
			x += GPH_CHAR_WIDTH;
		}
		return x;
    1112:	8d 81       	ldd	r24, Y+5	; 0x05
			s65_char(x, y, znak, bg, fg);
			x += GPH_CHAR_WIDTH;		
		}
		return x;
	#endif*/
}		
    1114:	2c 96       	adiw	r28, 0x0c	; 12
    1116:	0f b6       	in	r0, 0x3f	; 63
    1118:	f8 94       	cli
    111a:	de bf       	out	0x3e, r29	; 62
    111c:	0f be       	out	0x3f, r0	; 63
    111e:	cd bf       	out	0x3d, r28	; 61
    1120:	cf 91       	pop	r28
    1122:	df 91       	pop	r29
    1124:	1f 91       	pop	r17
    1126:	0f 91       	pop	r16
    1128:	08 95       	ret

0000112a <s65_load>:
	return x+=GPH_CHAR_WIDTH;
}	
#endif

#if S65_LOAD == 1
void s65_load(prog_uint8_t* pData, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint16_t bg, uint16_t fg) {
    112a:	cf 92       	push	r12
    112c:	df 92       	push	r13
    112e:	ef 92       	push	r14
    1130:	ff 92       	push	r15
    1132:	0f 93       	push	r16
    1134:	df 93       	push	r29
    1136:	cf 93       	push	r28
    1138:	cd b7       	in	r28, 0x3d	; 61
    113a:	de b7       	in	r29, 0x3e	; 62
    113c:	61 97       	sbiw	r28, 0x11	; 17
    113e:	0f b6       	in	r0, 0x3f	; 63
    1140:	f8 94       	cli
    1142:	de bf       	out	0x3e, r29	; 62
    1144:	0f be       	out	0x3f, r0	; 63
    1146:	cd bf       	out	0x3d, r28	; 61
    1148:	99 87       	std	Y+9, r25	; 0x09
    114a:	88 87       	std	Y+8, r24	; 0x08
    114c:	6a 87       	std	Y+10, r22	; 0x0a
    114e:	4b 87       	std	Y+11, r20	; 0x0b
    1150:	2c 87       	std	Y+12, r18	; 0x0c
    1152:	0d 87       	std	Y+13, r16	; 0x0d
    1154:	ff 86       	std	Y+15, r15	; 0x0f
    1156:	ee 86       	std	Y+14, r14	; 0x0e
    1158:	d9 8a       	std	Y+17, r13	; 0x11
    115a:	c8 8a       	std	Y+16, r12	; 0x10
	uint8_t b,y2,x2,t=0;
    115c:	1c 82       	std	Y+4, r1	; 0x04
	//h--;
	w+= x;// = (w-1) + x;
    115e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1160:	8a 85       	ldd	r24, Y+10	; 0x0a
    1162:	89 0f       	add	r24, r25
    1164:	8c 87       	std	Y+12, r24	; 0x0c
	h+= y;// = (h-1) + y;
    1166:	9d 85       	ldd	r25, Y+13	; 0x0d
    1168:	8b 85       	ldd	r24, Y+11	; 0x0b
    116a:	89 0f       	add	r24, r25
    116c:	8d 87       	std	Y+13, r24	; 0x0d
	
	if ((w > S65_WIDTH) || (h > S65_HEIGHT)) return;
    116e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1170:	85 38       	cpi	r24, 0x85	; 133
    1172:	08 f0       	brcs	.+2      	; 0x1176 <s65_load+0x4c>
    1174:	4f c0       	rjmp	.+158    	; 0x1214 <s65_load+0xea>
    1176:	8d 85       	ldd	r24, Y+13	; 0x0d
    1178:	81 3b       	cpi	r24, 0xB1	; 177
    117a:	08 f0       	brcs	.+2      	; 0x117e <s65_load+0x54>
    117c:	4b c0       	rjmp	.+150    	; 0x1214 <s65_load+0xea>
	
	s65_frame(x,y,w,h);
    117e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1180:	6b 85       	ldd	r22, Y+11	; 0x0b
    1182:	4c 85       	ldd	r20, Y+12	; 0x0c
    1184:	2d 85       	ldd	r18, Y+13	; 0x0d
    1186:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <s65_frame>
	
	for (y2=y;y2<h;y2++) {
    118a:	8b 85       	ldd	r24, Y+11	; 0x0b
    118c:	8e 83       	std	Y+6, r24	; 0x06
    118e:	3d c0       	rjmp	.+122    	; 0x120a <s65_load+0xe0>
		x2=x;
    1190:	8a 85       	ldd	r24, Y+10	; 0x0a
    1192:	8d 83       	std	Y+5, r24	; 0x05
    1194:	33 c0       	rjmp	.+102    	; 0x11fc <s65_load+0xd2>
		while (x2<w) {
			b = pgm_read_byte(pData++);
    1196:	88 85       	ldd	r24, Y+8	; 0x08
    1198:	99 85       	ldd	r25, Y+9	; 0x09
    119a:	9b 83       	std	Y+3, r25	; 0x03
    119c:	8a 83       	std	Y+2, r24	; 0x02
    119e:	88 85       	ldd	r24, Y+8	; 0x08
    11a0:	99 85       	ldd	r25, Y+9	; 0x09
    11a2:	01 96       	adiw	r24, 0x01	; 1
    11a4:	99 87       	std	Y+9, r25	; 0x09
    11a6:	88 87       	std	Y+8, r24	; 0x08
    11a8:	ea 81       	ldd	r30, Y+2	; 0x02
    11aa:	fb 81       	ldd	r31, Y+3	; 0x03
    11ac:	84 91       	lpm	r24, Z+
    11ae:	89 83       	std	Y+1, r24	; 0x01
    11b0:	89 81       	ldd	r24, Y+1	; 0x01
    11b2:	8f 83       	std	Y+7, r24	; 0x07
			for (t=0;t<8;t++) {
    11b4:	1c 82       	std	Y+4, r1	; 0x04
    11b6:	1c c0       	rjmp	.+56     	; 0x11f0 <s65_load+0xc6>
				if (b & 0x80) {
    11b8:	8f 81       	ldd	r24, Y+7	; 0x07
    11ba:	88 23       	and	r24, r24
    11bc:	54 f4       	brge	.+20     	; 0x11d2 <s65_load+0xa8>
					s65_pix((x2+t),y2,fg);
    11be:	9d 81       	ldd	r25, Y+5	; 0x05
    11c0:	8c 81       	ldd	r24, Y+4	; 0x04
    11c2:	89 0f       	add	r24, r25
    11c4:	28 89       	ldd	r18, Y+16	; 0x10
    11c6:	39 89       	ldd	r19, Y+17	; 0x11
    11c8:	6e 81       	ldd	r22, Y+6	; 0x06
    11ca:	a9 01       	movw	r20, r18
    11cc:	0e 94 2f 05 	call	0xa5e	; 0xa5e <s65_pix>
    11d0:	09 c0       	rjmp	.+18     	; 0x11e4 <s65_load+0xba>
				} else {
					s65_pix((x2+t),y2,bg);
    11d2:	9d 81       	ldd	r25, Y+5	; 0x05
    11d4:	8c 81       	ldd	r24, Y+4	; 0x04
    11d6:	89 0f       	add	r24, r25
    11d8:	2e 85       	ldd	r18, Y+14	; 0x0e
    11da:	3f 85       	ldd	r19, Y+15	; 0x0f
    11dc:	6e 81       	ldd	r22, Y+6	; 0x06
    11de:	a9 01       	movw	r20, r18
    11e0:	0e 94 2f 05 	call	0xa5e	; 0xa5e <s65_pix>
				}
				b <<= 1;
    11e4:	8f 81       	ldd	r24, Y+7	; 0x07
    11e6:	88 0f       	add	r24, r24
    11e8:	8f 83       	std	Y+7, r24	; 0x07
	
	for (y2=y;y2<h;y2++) {
		x2=x;
		while (x2<w) {
			b = pgm_read_byte(pData++);
			for (t=0;t<8;t++) {
    11ea:	8c 81       	ldd	r24, Y+4	; 0x04
    11ec:	8f 5f       	subi	r24, 0xFF	; 255
    11ee:	8c 83       	std	Y+4, r24	; 0x04
    11f0:	8c 81       	ldd	r24, Y+4	; 0x04
    11f2:	88 30       	cpi	r24, 0x08	; 8
    11f4:	08 f3       	brcs	.-62     	; 0x11b8 <s65_load+0x8e>
				} else {
					s65_pix((x2+t),y2,bg);
				}
				b <<= 1;
			}
			x2+=8;
    11f6:	8d 81       	ldd	r24, Y+5	; 0x05
    11f8:	88 5f       	subi	r24, 0xF8	; 248
    11fa:	8d 83       	std	Y+5, r24	; 0x05
	
	s65_frame(x,y,w,h);
	
	for (y2=y;y2<h;y2++) {
		x2=x;
		while (x2<w) {
    11fc:	9d 81       	ldd	r25, Y+5	; 0x05
    11fe:	8c 85       	ldd	r24, Y+12	; 0x0c
    1200:	98 17       	cp	r25, r24
    1202:	48 f2       	brcs	.-110    	; 0x1196 <s65_load+0x6c>
	
	if ((w > S65_WIDTH) || (h > S65_HEIGHT)) return;
	
	s65_frame(x,y,w,h);
	
	for (y2=y;y2<h;y2++) {
    1204:	8e 81       	ldd	r24, Y+6	; 0x06
    1206:	8f 5f       	subi	r24, 0xFF	; 255
    1208:	8e 83       	std	Y+6, r24	; 0x06
    120a:	9e 81       	ldd	r25, Y+6	; 0x06
    120c:	8d 85       	ldd	r24, Y+13	; 0x0d
    120e:	98 17       	cp	r25, r24
    1210:	08 f4       	brcc	.+2      	; 0x1214 <s65_load+0xea>
    1212:	be cf       	rjmp	.-132    	; 0x1190 <s65_load+0x66>
				b <<= 1;
			}
			x2+=8;
		}
	}
}
    1214:	61 96       	adiw	r28, 0x11	; 17
    1216:	0f b6       	in	r0, 0x3f	; 63
    1218:	f8 94       	cli
    121a:	de bf       	out	0x3e, r29	; 62
    121c:	0f be       	out	0x3f, r0	; 63
    121e:	cd bf       	out	0x3d, r28	; 61
    1220:	cf 91       	pop	r28
    1222:	df 91       	pop	r29
    1224:	0f 91       	pop	r16
    1226:	ff 90       	pop	r15
    1228:	ef 90       	pop	r14
    122a:	df 90       	pop	r13
    122c:	cf 90       	pop	r12
    122e:	08 95       	ret

00001230 <s65_load_color>:
#endif

#if S65_LOAD_COLOR == 1
void s65_load_color(prog_uint16_t* pData, uint8_t x, uint8_t y, uint8_t w, uint8_t h) {
    1230:	0f 93       	push	r16
    1232:	df 93       	push	r29
    1234:	cf 93       	push	r28
    1236:	cd b7       	in	r28, 0x3d	; 61
    1238:	de b7       	in	r29, 0x3e	; 62
    123a:	2e 97       	sbiw	r28, 0x0e	; 14
    123c:	0f b6       	in	r0, 0x3f	; 63
    123e:	f8 94       	cli
    1240:	de bf       	out	0x3e, r29	; 62
    1242:	0f be       	out	0x3f, r0	; 63
    1244:	cd bf       	out	0x3d, r28	; 61
    1246:	9a 87       	std	Y+10, r25	; 0x0a
    1248:	89 87       	std	Y+9, r24	; 0x09
    124a:	6b 87       	std	Y+11, r22	; 0x0b
    124c:	4c 87       	std	Y+12, r20	; 0x0c
    124e:	2d 87       	std	Y+13, r18	; 0x0d
    1250:	0e 87       	std	Y+14, r16	; 0x0e
	uint8_t y2,x2;
	uint16_t b;
	//h--;
	w+= x;// = (w-1) + x;
    1252:	9d 85       	ldd	r25, Y+13	; 0x0d
    1254:	8b 85       	ldd	r24, Y+11	; 0x0b
    1256:	89 0f       	add	r24, r25
    1258:	8d 87       	std	Y+13, r24	; 0x0d
	h+= y;// = (h-1) + y;
    125a:	9e 85       	ldd	r25, Y+14	; 0x0e
    125c:	8c 85       	ldd	r24, Y+12	; 0x0c
    125e:	89 0f       	add	r24, r25
    1260:	8e 87       	std	Y+14, r24	; 0x0e
	
	if ((w > S65_WIDTH) || (h > S65_HEIGHT)) return;
    1262:	8d 85       	ldd	r24, Y+13	; 0x0d
    1264:	85 38       	cpi	r24, 0x85	; 133
    1266:	08 f0       	brcs	.+2      	; 0x126a <s65_load_color+0x3a>
    1268:	3a c0       	rjmp	.+116    	; 0x12de <s65_load_color+0xae>
    126a:	8e 85       	ldd	r24, Y+14	; 0x0e
    126c:	81 3b       	cpi	r24, 0xB1	; 177
    126e:	b8 f5       	brcc	.+110    	; 0x12de <s65_load_color+0xae>
	
	s65_frame(0,0,175,131);
    1270:	80 e0       	ldi	r24, 0x00	; 0
    1272:	60 e0       	ldi	r22, 0x00	; 0
    1274:	4f ea       	ldi	r20, 0xAF	; 175
    1276:	23 e8       	ldi	r18, 0x83	; 131
    1278:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <s65_frame>
	
	//usart_SendStrP((prog_char*)PSTR("\r\nCOLOR LOAD PROCEDURE+++++++++++++++++++"));
	
	for (y2=y;y2<h;y2++) {
    127c:	8c 85       	ldd	r24, Y+12	; 0x0c
    127e:	88 87       	std	Y+8, r24	; 0x08
    1280:	2a c0       	rjmp	.+84     	; 0x12d6 <s65_load_color+0xa6>
		x2=x;
    1282:	8b 85       	ldd	r24, Y+11	; 0x0b
    1284:	8f 83       	std	Y+7, r24	; 0x07
    1286:	20 c0       	rjmp	.+64     	; 0x12c8 <s65_load_color+0x98>
		while (x2<w) {
			b = pgm_read_word(pData++);
    1288:	89 85       	ldd	r24, Y+9	; 0x09
    128a:	9a 85       	ldd	r25, Y+10	; 0x0a
    128c:	9c 83       	std	Y+4, r25	; 0x04
    128e:	8b 83       	std	Y+3, r24	; 0x03
    1290:	89 85       	ldd	r24, Y+9	; 0x09
    1292:	9a 85       	ldd	r25, Y+10	; 0x0a
    1294:	02 96       	adiw	r24, 0x02	; 2
    1296:	9a 87       	std	Y+10, r25	; 0x0a
    1298:	89 87       	std	Y+9, r24	; 0x09
    129a:	8b 81       	ldd	r24, Y+3	; 0x03
    129c:	9c 81       	ldd	r25, Y+4	; 0x04
    129e:	fc 01       	movw	r30, r24
    12a0:	85 91       	lpm	r24, Z+
    12a2:	94 91       	lpm	r25, Z+
    12a4:	9a 83       	std	Y+2, r25	; 0x02
    12a6:	89 83       	std	Y+1, r24	; 0x01
    12a8:	fc 83       	std	Y+4, r31	; 0x04
    12aa:	eb 83       	std	Y+3, r30	; 0x03
    12ac:	89 81       	ldd	r24, Y+1	; 0x01
    12ae:	9a 81       	ldd	r25, Y+2	; 0x02
    12b0:	9e 83       	std	Y+6, r25	; 0x06
    12b2:	8d 83       	std	Y+5, r24	; 0x05
			s65_pix(x2,y2,b);
    12b4:	2d 81       	ldd	r18, Y+5	; 0x05
    12b6:	3e 81       	ldd	r19, Y+6	; 0x06
    12b8:	8f 81       	ldd	r24, Y+7	; 0x07
    12ba:	68 85       	ldd	r22, Y+8	; 0x08
    12bc:	a9 01       	movw	r20, r18
    12be:	0e 94 2f 05 	call	0xa5e	; 0xa5e <s65_pix>
			usart_SendBinByte(b>>8);
			usart_SendBinByte(b);
			usart_SendChar(',');
			usart_SendDec(pData);
			*/
			x2++;
    12c2:	8f 81       	ldd	r24, Y+7	; 0x07
    12c4:	8f 5f       	subi	r24, 0xFF	; 255
    12c6:	8f 83       	std	Y+7, r24	; 0x07
	
	//usart_SendStrP((prog_char*)PSTR("\r\nCOLOR LOAD PROCEDURE+++++++++++++++++++"));
	
	for (y2=y;y2<h;y2++) {
		x2=x;
		while (x2<w) {
    12c8:	9f 81       	ldd	r25, Y+7	; 0x07
    12ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    12cc:	98 17       	cp	r25, r24
    12ce:	e0 f2       	brcs	.-72     	; 0x1288 <s65_load_color+0x58>
	
	s65_frame(0,0,175,131);
	
	//usart_SendStrP((prog_char*)PSTR("\r\nCOLOR LOAD PROCEDURE+++++++++++++++++++"));
	
	for (y2=y;y2<h;y2++) {
    12d0:	88 85       	ldd	r24, Y+8	; 0x08
    12d2:	8f 5f       	subi	r24, 0xFF	; 255
    12d4:	88 87       	std	Y+8, r24	; 0x08
    12d6:	98 85       	ldd	r25, Y+8	; 0x08
    12d8:	8e 85       	ldd	r24, Y+14	; 0x0e
    12da:	98 17       	cp	r25, r24
    12dc:	90 f2       	brcs	.-92     	; 0x1282 <s65_load_color+0x52>
			usart_SendDec(pData);
			*/
			x2++;
		}
	}
}
    12de:	2e 96       	adiw	r28, 0x0e	; 14
    12e0:	0f b6       	in	r0, 0x3f	; 63
    12e2:	f8 94       	cli
    12e4:	de bf       	out	0x3e, r29	; 62
    12e6:	0f be       	out	0x3f, r0	; 63
    12e8:	cd bf       	out	0x3d, r28	; 61
    12ea:	cf 91       	pop	r28
    12ec:	df 91       	pop	r29
    12ee:	0f 91       	pop	r16
    12f0:	08 95       	ret

000012f2 <usart_Init>:
											0x34, 0x35, 0x36, 0x37, 
											0x38, 0x39, 0x41, 0x42, 
											0x43, 0x44, 0x45, 0x46 };


void usart_Init(void) {
    12f2:	df 93       	push	r29
    12f4:	cf 93       	push	r28
    12f6:	cd b7       	in	r28, 0x3d	; 61
    12f8:	de b7       	in	r29, 0x3e	; 62
	UDR = 0x00; // reset data in udr
    12fa:	ec e2       	ldi	r30, 0x2C	; 44
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	10 82       	st	Z, r1
	UBRRH = 0;
    1300:	e0 e4       	ldi	r30, 0x40	; 64
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	10 82       	st	Z, r1
	UBRRL = USART_UBRR; // Assign UBRRL
    1306:	e9 e2       	ldi	r30, 0x29	; 41
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	8c e0       	ldi	r24, 0x0C	; 12
    130c:	80 83       	st	Z, r24
	UCSRB = (1 << RXEN) | (1 << TXEN); // Enable Tx & Rx
    130e:	ea e2       	ldi	r30, 0x2A	; 42
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	88 e1       	ldi	r24, 0x18	; 24
    1314:	80 83       	st	Z, r24
	UCSRC = (1<<URSEL) | (1 << UCSZ0) | (1 << UCSZ1); // Frame 8bit
    1316:	e0 e4       	ldi	r30, 0x40	; 64
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	86 e8       	ldi	r24, 0x86	; 134
    131c:	80 83       	st	Z, r24
}
    131e:	cf 91       	pop	r28
    1320:	df 91       	pop	r29
    1322:	08 95       	ret

00001324 <usart_SendChar>:

void usart_SendChar(uint8_t c) {
    1324:	df 93       	push	r29
    1326:	cf 93       	push	r28
    1328:	0f 92       	push	r0
    132a:	cd b7       	in	r28, 0x3d	; 61
    132c:	de b7       	in	r29, 0x3e	; 62
    132e:	89 83       	std	Y+1, r24	; 0x01
	// wait until UDR will be empty
	while ( ! (UCSRA & (1 << UDRE) ) ) { }
    1330:	eb e2       	ldi	r30, 0x2B	; 43
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	80 81       	ld	r24, Z
    1336:	88 2f       	mov	r24, r24
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	80 72       	andi	r24, 0x20	; 32
    133c:	90 70       	andi	r25, 0x00	; 0
    133e:	00 97       	sbiw	r24, 0x00	; 0
    1340:	b9 f3       	breq	.-18     	; 0x1330 <usart_SendChar+0xc>
	// insert char into UDR (this oper. sends char)
	UDR = c;
    1342:	ec e2       	ldi	r30, 0x2C	; 44
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	89 81       	ldd	r24, Y+1	; 0x01
    1348:	80 83       	st	Z, r24
}
    134a:	0f 90       	pop	r0
    134c:	cf 91       	pop	r28
    134e:	df 91       	pop	r29
    1350:	08 95       	ret

00001352 <usart_SendStr>:

void usart_SendStr(char* str) {
    1352:	df 93       	push	r29
    1354:	cf 93       	push	r28
    1356:	00 d0       	rcall	.+0      	; 0x1358 <usart_SendStr+0x6>
    1358:	00 d0       	rcall	.+0      	; 0x135a <usart_SendStr+0x8>
    135a:	cd b7       	in	r28, 0x3d	; 61
    135c:	de b7       	in	r29, 0x3e	; 62
    135e:	9b 83       	std	Y+3, r25	; 0x03
    1360:	8a 83       	std	Y+2, r24	; 0x02
    1362:	03 c0       	rjmp	.+6      	; 0x136a <usart_SendStr+0x18>
	char znak;
	while(0 != (znak = *(str++))) usart_SendChar(znak);
    1364:	89 81       	ldd	r24, Y+1	; 0x01
    1366:	0e 94 92 09 	call	0x1324	; 0x1324 <usart_SendChar>
    136a:	ea 81       	ldd	r30, Y+2	; 0x02
    136c:	fb 81       	ldd	r31, Y+3	; 0x03
    136e:	80 81       	ld	r24, Z
    1370:	89 83       	std	Y+1, r24	; 0x01
    1372:	89 81       	ldd	r24, Y+1	; 0x01
    1374:	8c 83       	std	Y+4, r24	; 0x04
    1376:	8c 81       	ldd	r24, Y+4	; 0x04
    1378:	88 23       	and	r24, r24
    137a:	11 f0       	breq	.+4      	; 0x1380 <usart_SendStr+0x2e>
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	8c 83       	std	Y+4, r24	; 0x04
    1380:	8c 81       	ldd	r24, Y+4	; 0x04
    1382:	2a 81       	ldd	r18, Y+2	; 0x02
    1384:	3b 81       	ldd	r19, Y+3	; 0x03
    1386:	2f 5f       	subi	r18, 0xFF	; 255
    1388:	3f 4f       	sbci	r19, 0xFF	; 255
    138a:	3b 83       	std	Y+3, r19	; 0x03
    138c:	2a 83       	std	Y+2, r18	; 0x02
    138e:	88 23       	and	r24, r24
    1390:	49 f7       	brne	.-46     	; 0x1364 <usart_SendStr+0x12>
}
    1392:	0f 90       	pop	r0
    1394:	0f 90       	pop	r0
    1396:	0f 90       	pop	r0
    1398:	0f 90       	pop	r0
    139a:	cf 91       	pop	r28
    139c:	df 91       	pop	r29
    139e:	08 95       	ret

000013a0 <usart_SendStrP>:

void usart_SendStrP(prog_char* str) {
    13a0:	df 93       	push	r29
    13a2:	cf 93       	push	r28
    13a4:	00 d0       	rcall	.+0      	; 0x13a6 <usart_SendStrP+0x6>
    13a6:	00 d0       	rcall	.+0      	; 0x13a8 <usart_SendStrP+0x8>
    13a8:	00 d0       	rcall	.+0      	; 0x13aa <usart_SendStrP+0xa>
    13aa:	cd b7       	in	r28, 0x3d	; 61
    13ac:	de b7       	in	r29, 0x3e	; 62
    13ae:	9e 83       	std	Y+6, r25	; 0x06
    13b0:	8d 83       	std	Y+5, r24	; 0x05
    13b2:	03 c0       	rjmp	.+6      	; 0x13ba <usart_SendStrP+0x1a>
	char znak;
	while (0 != (znak = pgm_read_byte(str++))) usart_SendChar(znak);
    13b4:	8c 81       	ldd	r24, Y+4	; 0x04
    13b6:	0e 94 92 09 	call	0x1324	; 0x1324 <usart_SendChar>
    13ba:	8d 81       	ldd	r24, Y+5	; 0x05
    13bc:	9e 81       	ldd	r25, Y+6	; 0x06
    13be:	9b 83       	std	Y+3, r25	; 0x03
    13c0:	8a 83       	std	Y+2, r24	; 0x02
    13c2:	8d 81       	ldd	r24, Y+5	; 0x05
    13c4:	9e 81       	ldd	r25, Y+6	; 0x06
    13c6:	01 96       	adiw	r24, 0x01	; 1
    13c8:	9e 83       	std	Y+6, r25	; 0x06
    13ca:	8d 83       	std	Y+5, r24	; 0x05
    13cc:	ea 81       	ldd	r30, Y+2	; 0x02
    13ce:	fb 81       	ldd	r31, Y+3	; 0x03
    13d0:	84 91       	lpm	r24, Z+
    13d2:	89 83       	std	Y+1, r24	; 0x01
    13d4:	89 81       	ldd	r24, Y+1	; 0x01
    13d6:	8c 83       	std	Y+4, r24	; 0x04
    13d8:	8c 81       	ldd	r24, Y+4	; 0x04
    13da:	88 23       	and	r24, r24
    13dc:	59 f7       	brne	.-42     	; 0x13b4 <usart_SendStrP+0x14>
}
    13de:	26 96       	adiw	r28, 0x06	; 6
    13e0:	0f b6       	in	r0, 0x3f	; 63
    13e2:	f8 94       	cli
    13e4:	de bf       	out	0x3e, r29	; 62
    13e6:	0f be       	out	0x3f, r0	; 63
    13e8:	cd bf       	out	0x3d, r28	; 61
    13ea:	cf 91       	pop	r28
    13ec:	df 91       	pop	r29
    13ee:	08 95       	ret

000013f0 <usart_SendDec>:

void usart_SendDec(int val) {
    13f0:	df 93       	push	r29
    13f2:	cf 93       	push	r28
    13f4:	cd b7       	in	r28, 0x3d	; 61
    13f6:	de b7       	in	r29, 0x3e	; 62
    13f8:	29 97       	sbiw	r28, 0x09	; 9
    13fa:	0f b6       	in	r0, 0x3f	; 63
    13fc:	f8 94       	cli
    13fe:	de bf       	out	0x3e, r29	; 62
    1400:	0f be       	out	0x3f, r0	; 63
    1402:	cd bf       	out	0x3d, r28	; 61
    1404:	99 87       	std	Y+9, r25	; 0x09
    1406:	88 87       	std	Y+8, r24	; 0x08
	char bufor[7];
	usart_SendStr(itoa(val, bufor, 10));
    1408:	88 85       	ldd	r24, Y+8	; 0x08
    140a:	99 85       	ldd	r25, Y+9	; 0x09
    140c:	9e 01       	movw	r18, r28
    140e:	2f 5f       	subi	r18, 0xFF	; 255
    1410:	3f 4f       	sbci	r19, 0xFF	; 255
    1412:	b9 01       	movw	r22, r18
    1414:	4a e0       	ldi	r20, 0x0A	; 10
    1416:	50 e0       	ldi	r21, 0x00	; 0
    1418:	0e 94 6d 0a 	call	0x14da	; 0x14da <itoa>
    141c:	0e 94 a9 09 	call	0x1352	; 0x1352 <usart_SendStr>
}
    1420:	29 96       	adiw	r28, 0x09	; 9
    1422:	0f b6       	in	r0, 0x3f	; 63
    1424:	f8 94       	cli
    1426:	de bf       	out	0x3e, r29	; 62
    1428:	0f be       	out	0x3f, r0	; 63
    142a:	cd bf       	out	0x3d, r28	; 61
    142c:	cf 91       	pop	r28
    142e:	df 91       	pop	r29
    1430:	08 95       	ret

00001432 <usart_DecToHex>:

uint8_t usart_DecToHex(uint8_t z) {
    1432:	df 93       	push	r29
    1434:	cf 93       	push	r28
    1436:	00 d0       	rcall	.+0      	; 0x1438 <usart_DecToHex+0x6>
    1438:	00 d0       	rcall	.+0      	; 0x143a <usart_DecToHex+0x8>
    143a:	cd b7       	in	r28, 0x3d	; 61
    143c:	de b7       	in	r29, 0x3e	; 62
    143e:	8c 83       	std	Y+4, r24	; 0x04
	z &= 0x0f;
    1440:	8c 81       	ldd	r24, Y+4	; 0x04
    1442:	8f 70       	andi	r24, 0x0F	; 15
    1444:	8c 83       	std	Y+4, r24	; 0x04
	return pgm_read_byte(&usart_CharTab[z]);
    1446:	8c 81       	ldd	r24, Y+4	; 0x04
    1448:	88 2f       	mov	r24, r24
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	8b 56       	subi	r24, 0x6B	; 107
    144e:	9c 4f       	sbci	r25, 0xFC	; 252
    1450:	9b 83       	std	Y+3, r25	; 0x03
    1452:	8a 83       	std	Y+2, r24	; 0x02
    1454:	ea 81       	ldd	r30, Y+2	; 0x02
    1456:	fb 81       	ldd	r31, Y+3	; 0x03
    1458:	84 91       	lpm	r24, Z+
    145a:	89 83       	std	Y+1, r24	; 0x01
    145c:	89 81       	ldd	r24, Y+1	; 0x01
}
    145e:	0f 90       	pop	r0
    1460:	0f 90       	pop	r0
    1462:	0f 90       	pop	r0
    1464:	0f 90       	pop	r0
    1466:	cf 91       	pop	r28
    1468:	df 91       	pop	r29
    146a:	08 95       	ret

0000146c <usart_SendHexByte>:

void usart_SendHexByte(uint8_t data) {
    146c:	df 93       	push	r29
    146e:	cf 93       	push	r28
    1470:	0f 92       	push	r0
    1472:	cd b7       	in	r28, 0x3d	; 61
    1474:	de b7       	in	r29, 0x3e	; 62
    1476:	89 83       	std	Y+1, r24	; 0x01
	usart_SendChar(usart_DecToHex((data >> 4) & 0x0f));
    1478:	89 81       	ldd	r24, Y+1	; 0x01
    147a:	82 95       	swap	r24
    147c:	8f 70       	andi	r24, 0x0F	; 15
    147e:	0e 94 19 0a 	call	0x1432	; 0x1432 <usart_DecToHex>
    1482:	0e 94 92 09 	call	0x1324	; 0x1324 <usart_SendChar>
	usart_SendChar(usart_DecToHex(data & 0x0f));
    1486:	89 81       	ldd	r24, Y+1	; 0x01
    1488:	8f 70       	andi	r24, 0x0F	; 15
    148a:	0e 94 19 0a 	call	0x1432	; 0x1432 <usart_DecToHex>
    148e:	0e 94 92 09 	call	0x1324	; 0x1324 <usart_SendChar>
}
    1492:	0f 90       	pop	r0
    1494:	cf 91       	pop	r28
    1496:	df 91       	pop	r29
    1498:	08 95       	ret

0000149a <usart_SendBinByte>:

void usart_SendBinByte(uint8_t bin) {
    149a:	df 93       	push	r29
    149c:	cf 93       	push	r28
    149e:	00 d0       	rcall	.+0      	; 0x14a0 <usart_SendBinByte+0x6>
    14a0:	cd b7       	in	r28, 0x3d	; 61
    14a2:	de b7       	in	r29, 0x3e	; 62
    14a4:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i;
	for (i=0;i<8;i++) {
    14a6:	19 82       	std	Y+1, r1	; 0x01
    14a8:	10 c0       	rjmp	.+32     	; 0x14ca <usart_SendBinByte+0x30>
		if (bin & 0x80) usart_SendChar('1'); else usart_SendChar('0');
    14aa:	8a 81       	ldd	r24, Y+2	; 0x02
    14ac:	88 23       	and	r24, r24
    14ae:	24 f4       	brge	.+8      	; 0x14b8 <usart_SendBinByte+0x1e>
    14b0:	81 e3       	ldi	r24, 0x31	; 49
    14b2:	0e 94 92 09 	call	0x1324	; 0x1324 <usart_SendChar>
    14b6:	03 c0       	rjmp	.+6      	; 0x14be <usart_SendBinByte+0x24>
    14b8:	80 e3       	ldi	r24, 0x30	; 48
    14ba:	0e 94 92 09 	call	0x1324	; 0x1324 <usart_SendChar>
		bin <<= 1;
    14be:	8a 81       	ldd	r24, Y+2	; 0x02
    14c0:	88 0f       	add	r24, r24
    14c2:	8a 83       	std	Y+2, r24	; 0x02
	usart_SendChar(usart_DecToHex(data & 0x0f));
}

void usart_SendBinByte(uint8_t bin) {
	uint8_t i;
	for (i=0;i<8;i++) {
    14c4:	89 81       	ldd	r24, Y+1	; 0x01
    14c6:	8f 5f       	subi	r24, 0xFF	; 255
    14c8:	89 83       	std	Y+1, r24	; 0x01
    14ca:	89 81       	ldd	r24, Y+1	; 0x01
    14cc:	88 30       	cpi	r24, 0x08	; 8
    14ce:	68 f3       	brcs	.-38     	; 0x14aa <usart_SendBinByte+0x10>
		if (bin & 0x80) usart_SendChar('1'); else usart_SendChar('0');
		bin <<= 1;
	}
}
    14d0:	0f 90       	pop	r0
    14d2:	0f 90       	pop	r0
    14d4:	cf 91       	pop	r28
    14d6:	df 91       	pop	r29
    14d8:	08 95       	ret

000014da <itoa>:
    14da:	fb 01       	movw	r30, r22
    14dc:	9f 01       	movw	r18, r30
    14de:	e8 94       	clt
    14e0:	42 30       	cpi	r20, 0x02	; 2
    14e2:	c4 f0       	brlt	.+48     	; 0x1514 <itoa+0x3a>
    14e4:	45 32       	cpi	r20, 0x25	; 37
    14e6:	b4 f4       	brge	.+44     	; 0x1514 <itoa+0x3a>
    14e8:	4a 30       	cpi	r20, 0x0A	; 10
    14ea:	29 f4       	brne	.+10     	; 0x14f6 <itoa+0x1c>
    14ec:	97 fb       	bst	r25, 7
    14ee:	1e f4       	brtc	.+6      	; 0x14f6 <itoa+0x1c>
    14f0:	90 95       	com	r25
    14f2:	81 95       	neg	r24
    14f4:	9f 4f       	sbci	r25, 0xFF	; 255
    14f6:	64 2f       	mov	r22, r20
    14f8:	77 27       	eor	r23, r23
    14fa:	0e 94 9e 0a 	call	0x153c	; 0x153c <__udivmodhi4>
    14fe:	80 5d       	subi	r24, 0xD0	; 208
    1500:	8a 33       	cpi	r24, 0x3A	; 58
    1502:	0c f0       	brlt	.+2      	; 0x1506 <itoa+0x2c>
    1504:	89 5d       	subi	r24, 0xD9	; 217
    1506:	81 93       	st	Z+, r24
    1508:	cb 01       	movw	r24, r22
    150a:	00 97       	sbiw	r24, 0x00	; 0
    150c:	a1 f7       	brne	.-24     	; 0x14f6 <itoa+0x1c>
    150e:	16 f4       	brtc	.+4      	; 0x1514 <itoa+0x3a>
    1510:	5d e2       	ldi	r21, 0x2D	; 45
    1512:	51 93       	st	Z+, r21
    1514:	10 82       	st	Z, r1
    1516:	c9 01       	movw	r24, r18
    1518:	0c 94 8e 0a 	jmp	0x151c	; 0x151c <strrev>

0000151c <strrev>:
    151c:	dc 01       	movw	r26, r24
    151e:	fc 01       	movw	r30, r24
    1520:	67 2f       	mov	r22, r23
    1522:	71 91       	ld	r23, Z+
    1524:	77 23       	and	r23, r23
    1526:	e1 f7       	brne	.-8      	; 0x1520 <strrev+0x4>
    1528:	32 97       	sbiw	r30, 0x02	; 2
    152a:	04 c0       	rjmp	.+8      	; 0x1534 <strrev+0x18>
    152c:	7c 91       	ld	r23, X
    152e:	6d 93       	st	X+, r22
    1530:	70 83       	st	Z, r23
    1532:	62 91       	ld	r22, -Z
    1534:	ae 17       	cp	r26, r30
    1536:	bf 07       	cpc	r27, r31
    1538:	c8 f3       	brcs	.-14     	; 0x152c <strrev+0x10>
    153a:	08 95       	ret

0000153c <__udivmodhi4>:
    153c:	aa 1b       	sub	r26, r26
    153e:	bb 1b       	sub	r27, r27
    1540:	51 e1       	ldi	r21, 0x11	; 17
    1542:	07 c0       	rjmp	.+14     	; 0x1552 <__udivmodhi4_ep>

00001544 <__udivmodhi4_loop>:
    1544:	aa 1f       	adc	r26, r26
    1546:	bb 1f       	adc	r27, r27
    1548:	a6 17       	cp	r26, r22
    154a:	b7 07       	cpc	r27, r23
    154c:	10 f0       	brcs	.+4      	; 0x1552 <__udivmodhi4_ep>
    154e:	a6 1b       	sub	r26, r22
    1550:	b7 0b       	sbc	r27, r23

00001552 <__udivmodhi4_ep>:
    1552:	88 1f       	adc	r24, r24
    1554:	99 1f       	adc	r25, r25
    1556:	5a 95       	dec	r21
    1558:	a9 f7       	brne	.-22     	; 0x1544 <__udivmodhi4_loop>
    155a:	80 95       	com	r24
    155c:	90 95       	com	r25
    155e:	bc 01       	movw	r22, r24
    1560:	cd 01       	movw	r24, r26
    1562:	08 95       	ret

00001564 <_exit>:
    1564:	f8 94       	cli

00001566 <__stop_program>:
    1566:	ff cf       	rjmp	.-2      	; 0x1566 <__stop_program>
